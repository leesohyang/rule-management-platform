{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/slideTable.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport { Checkbox, TablePagination, Tooltip } from \"@material-ui/core\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllR, revRe } from \"../services/Redux/actions\";\nimport { apiProvider } from \"../services/Provider\";\nimport { revOp, clickedOp } from \"../services/Redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 650 // display: \"flex\"\n\n  },\n  tableHead: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  tableBody: {\n    display: \"flex\"\n  },\n  tableRow: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n});\n\nfunction BasicTableR(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles2();\n  const [selected, setSelected] = useState([]);\n  const dispatch = useDispatch();\n  const results = useSelector(state => state.fetchAPI);\n  const [state, setState] = useState({\n    order: \"asc\",\n    orderBy: \"name\",\n    selected1: [],\n    page: 0,\n    rowsPerPage: 5\n  }); //custom hook\n\n  function useEffectSkipFirst(fn, arr) {\n    _s();\n\n    const isFirst = React.useRef(true);\n    useEffect(() => {\n      if (isFirst.current) {\n        isFirst.current = false;\n        return;\n      }\n\n      return fn();\n    }, arr);\n  }\n\n  _s(useEffectSkipFirst, \"x0DIufxRLPW/5DynbDxfl2fdtNU=\");\n\n  useEffectSkipFirst(() => {\n    //이거 SkipFirst 해도 되는지 다시 확인요망\n    // dispatch(apiProvider.getAllRedux(type))\n    // props.handleData()\n    apiProvider.getNodes();\n  }, [results.ad, results.refre, results.currType]);\n  useEffectSkipFirst(() => {\n    if (props.delete) setSelected([]);\n  }, [props.delete]);\n\n  const handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = \"desc\";\n\n    if (state.orderBy === property && state.order === \"desc\") {\n      order = \"asc\";\n    }\n\n    setState({ ...state,\n      order: order,\n      orderBy: orderBy\n    });\n  };\n\n  const handleChangePage = (event, newpage) => {\n    setState({ ...state,\n      page: newpage\n    });\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setState({ ...state,\n      page: 0,\n      rowsPerPage: parseInt(event.target.value)\n    });\n  };\n\n  const handleSelectAllClick = (event, checked) => {\n    if (checked) {\n      setSelected(results.linkData.map(n => n.id));\n      props.selectedUp(results.linkData.map(n => n.id));\n      return;\n    }\n\n    setSelected([]);\n    props.selectedUp([]);\n  };\n\n  const handleClick = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n    props.selectedUp(newSelected);\n  };\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  const handleCellClick = (e, row) => {\n    // apiProvider.getRow(results.currType, row.id).then((data)=>dispatch(clickedOp(data.data, true)))\n    props.handleCell && props.handleCell(e, row);\n  };\n\n  const createSortHandler = property => event => {\n    handleRequestSort(event, property);\n  };\n\n  function getSorting(order, orderBy) {\n    return order === \"desc\" ? (a, b) => b[orderBy] < a[orderBy] ? -1 : 1 : (a, b) => a[orderBy] < b[orderBy] ? -1 : 1;\n  }\n\n  const handleDetail = event => {//상세정보 누르면 popup 뜨게 해놓을까? node 상세정보는 봐야하니까. 뭔가 그래프가 주가 되게하고싶진 않은데\n  };\n\n  const {\n    order,\n    orderBy,\n    selected1,\n    rowsPerPage,\n    page\n  } = state;\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, results.linkData.length - page * rowsPerPage);\n  return results.linkData.length > 0 ? /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox // defaultChecked\n              , {\n                color: \"primary\",\n                inputProps: {\n                  'aria-label': 'secondary checkbox'\n                },\n                onChange: handleSelectAllClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this), Object.keys(results.linkData.find(Boolean)).filter(i => [].indexOf(i) < 0).map((item, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              sortDirection: state.orderBy === item ? state.order : false,\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Sort\",\n                placement: \"bottom-start\",\n                enterDelay: 300,\n                children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                  active: state.orderBy === item,\n                  direction: state.order,\n                  onClick: createSortHandler(item),\n                  children: item\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 41\n              }, this)\n            }, item, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [results.linkData.filter(value => {\n            return props.val.length > 0 ? value.name.toLowerCase().includes(props.val.toLowerCase()) : value;\n          }).sort(getSorting(state.order, state.orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((item, index) => {\n            const isSelected2 = isSelected(item.id);\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\"\n                /*onClick={ HandleCheckBox }*/\n                ,\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: isSelected2,\n                  color: \"primary\",\n                  inputProps: {\n                    'aria-label': 'secondary checkbox'\n                  },\n                  selected: isSelected2,\n                  onClick: event => handleClick(event, item.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 45\n              }, this), Object.keys(results.linkData.find(Boolean)).filter(i => [].indexOf(i) < 0).map((itemKey, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                onClick: event => handleCellClick(event, item),\n                children: item[itemKey]\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 49\n              }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 41\n            }, this);\n          }), emptyRows > 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n            style: {\n              height: 53 * emptyRows\n            },\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 10, 25],\n      component: \"div\",\n      count: results.linkData.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"No Data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 24\n  }, this);\n}\n\n_s2(BasicTableR, \"4WjDypFOgONlwJxD5SDQPsD1dBo=\", false, function () {\n  return [useStyles2, useDispatch, useSelector, useEffectSkipFirst, useEffectSkipFirst];\n});\n\n_c = BasicTableR;\nexport default _c2 = /*#__PURE__*/React.memo(BasicTableR);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BasicTableR\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/slideTable.js"],"names":["React","useEffect","useState","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableSortLabel","Checkbox","TablePagination","Tooltip","TableBody","Button","MoreVertIcon","makeStyles","useDispatch","useSelector","getAllR","revRe","apiProvider","revOp","clickedOp","useStyles2","table","minWidth","tableHead","display","flexDirection","tableBody","tableRow","BasicTableR","props","classes","selected","setSelected","dispatch","results","state","fetchAPI","setState","order","orderBy","selected1","page","rowsPerPage","useEffectSkipFirst","fn","arr","isFirst","useRef","current","getNodes","ad","refre","currType","delete","handleRequestSort","event","property","handleChangePage","newpage","handleChangeRowsPerPage","parseInt","target","value","handleSelectAllClick","checked","linkData","map","n","id","selectedUp","handleClick","selectedIndex","indexOf","newSelected","concat","slice","length","isSelected","handleCellClick","e","row","handleCell","createSortHandler","getSorting","a","b","handleDetail","emptyRows","Math","min","Object","keys","find","Boolean","filter","i","item","index","val","name","toLowerCase","includes","sort","isSelected2","itemKey","height","memo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {Checkbox, TablePagination, Tooltip} from \"@material-ui/core\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getAllR, revRe} from \"../services/Redux/actions\";\nimport {apiProvider} from \"../services/Provider\";\nimport {revOp, clickedOp} from \"../services/Redux/actions\";\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 650,\n        // display: \"flex\"\n    },\n    tableHead: {\n        display:\"flex\",\n        flexDirection:\"column\",\n    },\n    tableBody: {\n        display:\"flex\",\n\n    },\n    tableRow: {\n        display:\"flex\",\n        flexDirection:\"column\"\n    }\n\n});\n\nfunction BasicTableR(props) {\n    const classes = useStyles2();\n    const [selected, setSelected] = useState([])\n    const dispatch = useDispatch();\n\n    const results = useSelector(state => state.fetchAPI);\n    const [state, setState] = useState({\n        order: \"asc\",\n        orderBy: \"name\",\n        selected1:[],\n        page:0,\n        rowsPerPage:5\n    })\n    //custom hook\n    function useEffectSkipFirst(fn, arr){\n        const isFirst = React.useRef(true);\n\n        useEffect(()=>{\n            if(isFirst.current){\n                isFirst.current = false;\n                return;\n            }\n            return fn();\n        }, arr);\n    }\n\n    useEffectSkipFirst ( ()=>{ //이거 SkipFirst 해도 되는지 다시 확인요망\n        // dispatch(apiProvider.getAllRedux(type))\n        // props.handleData()\n        apiProvider.getNodes()\n    }, [results.ad, results.refre, results.currType])\n\n    useEffectSkipFirst(()=>{\n        if(props.delete) setSelected([])\n    },[props.delete])\n\n    const handleRequestSort = (event, property) => {\n        const orderBy = property;\n\n        let order = \"desc\";\n        if( state.orderBy === property && state.order === \"desc\") {\n            order = \"asc\";\n        }\n\n        setState({...state, order:order, orderBy: orderBy})\n    };\n\n\n    const handleChangePage = (event, newpage) => {\n        setState({...state, page:newpage});\n\n    };\n    const handleChangeRowsPerPage = event => {\n        setState({...state, page:0, rowsPerPage:parseInt(event.target.value)})\n\n    }\n\n    const handleSelectAllClick = (event, checked) => {\n        if (checked) {\n            setSelected(results.linkData.map(n=>n.id));\n            props.selectedUp(results.linkData.map(n=>n.id));\n\n            return;\n        }\n        setSelected([]);\n        props.selectedUp([]);\n\n\n    };\n\n    const handleClick = (event, id) => {\n\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n\n        props.selectedUp(newSelected);\n\n    };\n    const isSelected = id => selected.indexOf(id) !== -1;\n\n    const handleCellClick = (e, row) => {\n        // apiProvider.getRow(results.currType, row.id).then((data)=>dispatch(clickedOp(data.data, true)))\n        props.handleCell && props.handleCell(e, row)\n\n    }\n    const createSortHandler = property => event => {\n        handleRequestSort(event, property)\n    }\n\n    function getSorting(order, orderBy) {\n        return order === \"desc\"\n            ? (a, b) => (b[orderBy] < a[orderBy] ? -1 : 1)\n            : (a, b) => (a[orderBy] < b[orderBy] ? -1 : 1);\n\n    }\n\n    const handleDetail = (event) => { //상세정보 누르면 popup 뜨게 해놓을까? node 상세정보는 봐야하니까. 뭔가 그래프가 주가 되게하고싶진 않은데\n\n    }\n\n    const {order, orderBy, selected1 ,rowsPerPage, page} = state;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, results.linkData.length - page * rowsPerPage)\n    return (\n        results.linkData.length > 0 ?\n            <Paper>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n\n                            <TableRow>\n                                <TableCell>\n                                    <Checkbox\n                                        // defaultChecked\n                                        color=\"primary\"\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        onChange={handleSelectAllClick}\n\n                                    />\n                                </TableCell>\n                                {Object.keys(results.linkData.find(Boolean)).filter((i)=> [].indexOf(i) < 0).map((item, index) => (\n                                    <TableCell\n\n                                        align=\"right\"\n                                        key={item}\n                                        sortDirection={state.orderBy === item ? state.order : false}\n                                    >\n                                        <Tooltip\n                                            title=\"Sort\"\n                                            placement={\"bottom-start\"}\n                                            enterDelay={300}\n                                        >\n                                            <TableSortLabel\n                                                active={state.orderBy === item}\n                                                direction={state.order}\n                                                onClick={createSortHandler(item)}\n                                            >\n                                                {item}\n                                            </TableSortLabel>\n\n                                        </Tooltip>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {results.linkData.filter(value=>{\n                                return (\n                                    props.val.length > 0 ? (value.name.toLowerCase().includes(props.val.toLowerCase())) : (value)\n                                );\n                            }).sort(getSorting(state.order, state.orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((item, index) => {\n                                    const isSelected2 = isSelected(item.id);\n                                    return (\n                                        <TableRow key={index} >\n                                            <TableCell component=\"th\" scope=\"row\" /*onClick={ HandleCheckBox }*/>\n                                                <Checkbox\n                                                    checked={isSelected2}\n                                                    color=\"primary\"\n                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                    selected={isSelected2}\n                                                    onClick={event=>handleClick(event,item.id)}\n                                                />\n                                            </TableCell>\n\n                                            {Object.keys(results.linkData.find(Boolean)).filter((i)=> [].indexOf(i) < 0).map((itemKey, index) => (\n\n                                                <TableCell key={index} onClick={(event)=>handleCellClick(event, item)}>{item[itemKey]}</TableCell>\n                                            ))}\n                                            <TableCell align=\"right\">\n                                            </TableCell>\n                                        </TableRow>\n                                    )})}\n                            {emptyRows > 0 && (\n                                <TableRow style={{height:53 * emptyRows}}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={results.linkData.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n\n            </Paper> : <span>No Data</span>\n    );\n\n}\nexport default React.memo(BasicTableR)"]},"metadata":{},"sourceType":"module"}