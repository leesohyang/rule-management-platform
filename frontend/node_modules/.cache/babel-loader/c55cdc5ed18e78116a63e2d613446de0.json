{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/tmp/src/pages/Asset/RelForm.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { useForm, Form } from \"../../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport Input from \"../../components/controls/Input\";\nimport Select from \"../../components/controls/Select\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { apiProvider } from \"../../services/Provider\";\nimport MultiSelect from \"../../components/controls/MultiSelect\";\nimport { getGraphs, revAd, revRe, selectedOp } from \"../../services/Redux/actions\";\nimport NodeSelect from \"../../components/NodeSelect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n})); //clicked data 있으면 from node 설정 안하게 만들어놔야함.\n\nfunction RelForm(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const data = useSelector(state => state.SlidePop.clickedData);\n  const classes = useStyles();\n  const mounted = React.useRef(false); // const [cat, setCat] = React.useState('');\n\n  const [entityTypes, setEntityTypes] = React.useState([]);\n  const [vendors, setVendors] = React.useState([]);\n  const [models, setModels] = React.useState([]); // const [entities, setEntities] = React.useState(\"\");\n\n  const entities = useSelector(state => state.SlidePop.entities);\n  const selected = useSelector(state => state.SlidePop.selectedData);\n  const [state, setState] = useState([{\n    relation: '',\n    fromNodeID: '',\n    toNodeID: ''\n  }]);\n  const dispatch = useDispatch();\n  const validate = {}; //todo::validation만들기\n\n  const initialFValues = {\n    cat: '',\n    model: '',\n    vendor: '',\n    entityType: '',\n    relation: 'contain',\n    // from_node_id: data.id,\n    // to_node_id: '',\n    createdAt: '1',\n    updatedAt: '1'\n  }; // const {\n  //     values,\n  //     setValues,\n  //     errors,\n  //     setErrors,\n  //     handleInputChange,\n  //     resetForm\n  // } = useForm(initialFValues, false, validate, )\n  //custom hook\n\n  function useEffectSkipFirst(fn, arr) {\n    _s();\n\n    const isFirst = React.useRef(true);\n    useEffect(() => {\n      if (isFirst.current) {\n        isFirst.current = false;\n        return;\n      }\n\n      return fn();\n    }, arr);\n  } // useEffectSkipFirst(()=>{\n  //     apiProvider.getTypes(values.cat).then((res) =>\n  //         setEntityTypes(res.data))\n  // }, [values.cat])\n  //\n  // useEffectSkipFirst(()=>{\n  //     if(values.cat === \"asset\"){\n  //         //entity list call api (asset\n  //         //setEntities -> multi select\n  //         apiProvider.getEna(values.entityType).then((res)=>\n  //         {\n  //             setEntities(res.data)\n  //         })\n  //     }\n  //     else {\n  //         apiProvider.getVendors(values.entityType).then((res) =>\n  //         {\n  //             setVendors(res.data);\n  //             setModels([]);\n  //         })\n  //     }\n  // }, [values.entityType])\n  //\n  // useEffectSkipFirst(()=>{\n  //     console.log(entities)\n  // }, [entities])\n  //\n  // useEffectSkipFirst(()=>{\n  //     apiProvider.getModels(values.entityType, values.vendor).then((res)=>\n  //     {\n  //         setModels(res.data.map((item)=> item.model))\n  //     })\n  // }, [values.vendor])\n  //\n  // useEffectSkipFirst(()=>{\n  //     if(values.cat === \"device\"){\n  //         //entity list call api (device)\n  //         apiProvider.getEnd(values.entityType, values.vendor, values.model).then((res)=>\n  //         {\n  //             setEntities(res.data)\n  //         })\n  //     }\n  //\n  // }, [values.model])\n\n\n  _s(useEffectSkipFirst, \"x0DIufxRLPW/5DynbDxfl2fdtNU=\");\n\n  useEffectSkipFirst(() => {\n    //DetailRel.js 에 add function 가져다써야함.\n    dispatch(getGraphs([], []));\n    apiProvider.insertLink(state).then(() => {\n      dispatch(revRe(true));\n      dispatch(selectedOp([]));\n    }).then(() => {\n      props.onclose(false);\n    }); //popup 끄고\n  }, [state]);\n\n  const handleSubmit = e => {\n    e.preventDefault(); //name 중복체크 하기\n\n    const ob = entities.filter(item => selected.indexOf(item.name) >= 0).map(i => i.id).map(item => ({\n      relation: \"Contain\",\n      fromNodeID: data.id,\n      toNodeID: item\n    }));\n    setState(ob);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(NodeSelect, {\n      type: \"Multi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Controls.Button, {\n        type: \"submit\",\n        text: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(RelForm, \"6CEFSA14kgIIuns38f9fpnga3tk=\", false, function () {\n  return [useSelector, useStyles, useSelector, useSelector, useDispatch, useEffectSkipFirst];\n});\n\n_c = RelForm;\nexport default _c2 = /*#__PURE__*/React.memo(RelForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RelForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/tmp/src/pages/Asset/RelForm.js"],"names":["React","useState","useEffect","Grid","useForm","Form","Controls","Input","Select","makeStyles","Typography","axios","useDispatch","useSelector","apiProvider","MultiSelect","getGraphs","revAd","revRe","selectedOp","NodeSelect","useStyles","theme","button","display","marginTop","spacing","formControl","margin","minWidth","RelForm","props","data","state","SlidePop","clickedData","classes","mounted","useRef","entityTypes","setEntityTypes","vendors","setVendors","models","setModels","entities","selected","selectedData","setState","relation","fromNodeID","toNodeID","dispatch","validate","initialFValues","cat","model","vendor","entityType","createdAt","updatedAt","useEffectSkipFirst","fn","arr","isFirst","current","insertLink","then","onclose","handleSubmit","e","preventDefault","ob","filter","item","indexOf","name","map","i","id","memo"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Grid, } from '@material-ui/core';\nimport {useForm, Form} from \"../../components/useForm\"\nimport Controls from \"../../components/controls/Controls\";\nimport Input from \"../../components/controls/Input\";\nimport Select from \"../../components/controls/Select\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {apiProvider} from \"../../services/Provider\";\nimport MultiSelect from \"../../components/controls/MultiSelect\";\nimport {getGraphs, revAd, revRe, selectedOp} from \"../../services/Redux/actions\";\nimport NodeSelect from \"../../components/NodeSelect\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n}));\n\n//clicked data 있으면 from node 설정 안하게 만들어놔야함.\nfunction RelForm(props) {\n    const data = useSelector(state => state.SlidePop.clickedData)\n    const classes = useStyles();\n    const mounted = React.useRef(false);\n    // const [cat, setCat] = React.useState('');\n    const [entityTypes, setEntityTypes] = React.useState([]);\n    const [vendors, setVendors] = React.useState([]);\n    const [models, setModels] = React.useState([]);\n\n    // const [entities, setEntities] = React.useState(\"\");\n    const entities = useSelector(state=>state.SlidePop.entities)\n\n    const selected = useSelector(state=>state.SlidePop.selectedData)\n\n    const [state, setState] = useState([{\n        relation:'',\n        fromNodeID:'',\n        toNodeID:''\n    }])\n    const dispatch = useDispatch();\n\n    const validate = {} //todo::validation만들기\n    const initialFValues = {\n        cat:'',\n        model: '',\n        vendor: '',\n        entityType: '',\n        relation: 'contain',\n        // from_node_id: data.id,\n        // to_node_id: '',\n        createdAt: '1',\n        updatedAt: '1'\n    }\n\n    // const {\n    //     values,\n    //     setValues,\n    //     errors,\n    //     setErrors,\n    //     handleInputChange,\n    //     resetForm\n    // } = useForm(initialFValues, false, validate, )\n\n    //custom hook\n    function useEffectSkipFirst(fn, arr){\n        const isFirst = React.useRef(true);\n\n        useEffect(()=>{\n            if(isFirst.current){\n                isFirst.current = false;\n                return;\n            }\n            return fn();\n        }, arr);\n    }\n\n    // useEffectSkipFirst(()=>{\n    //     apiProvider.getTypes(values.cat).then((res) =>\n    //         setEntityTypes(res.data))\n    // }, [values.cat])\n    //\n    // useEffectSkipFirst(()=>{\n    //     if(values.cat === \"asset\"){\n    //         //entity list call api (asset\n    //         //setEntities -> multi select\n    //         apiProvider.getEna(values.entityType).then((res)=>\n    //         {\n    //             setEntities(res.data)\n    //         })\n    //     }\n    //     else {\n    //         apiProvider.getVendors(values.entityType).then((res) =>\n    //         {\n    //             setVendors(res.data);\n    //             setModels([]);\n    //         })\n    //     }\n    // }, [values.entityType])\n    //\n    // useEffectSkipFirst(()=>{\n    //     console.log(entities)\n    // }, [entities])\n    //\n    // useEffectSkipFirst(()=>{\n    //     apiProvider.getModels(values.entityType, values.vendor).then((res)=>\n    //     {\n    //         setModels(res.data.map((item)=> item.model))\n    //     })\n    // }, [values.vendor])\n    //\n    // useEffectSkipFirst(()=>{\n    //     if(values.cat === \"device\"){\n    //         //entity list call api (device)\n    //         apiProvider.getEnd(values.entityType, values.vendor, values.model).then((res)=>\n    //         {\n    //             setEntities(res.data)\n    //         })\n    //     }\n    //\n    // }, [values.model])\n\n    useEffectSkipFirst(()=>{\n        //DetailRel.js 에 add function 가져다써야함.\n        dispatch(getGraphs([], []))\n        apiProvider.insertLink(state)\n            .then(()=>{dispatch(revRe(true));dispatch(selectedOp([]))})\n            .then(()=>{props.onclose(false)}) //popup 끄고\n\n    }, [state])\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        //name 중복체크 하기\n\n        const ob = entities.filter((item)=>selected.indexOf(item.name) >= 0).map((i)=>(i.id)).map((item)=>(\n            {relation:\"Contain\", fromNodeID:data.id, toNodeID:item}\n        ))\n        setState(ob)\n\n    }\n\n    return(\n        <Form onSubmit={handleSubmit}>\n            <NodeSelect type=\"Multi\"></NodeSelect>\n\n            <div>\n                <Controls.Button\n                    type=\"submit\"\n                    text=\"Submit\"\n                />\n            </div>\n            {/*<Grid container>*/}\n            {/*    <Grid item xs={6}>*/}\n\n            {/*        <Input*/}\n            {/*            readonly={true}*/}\n            {/*            name=\"relation\"*/}\n            {/*            label=\"relation\"*/}\n            {/*            value={values.relation}*/}\n            {/*        />*/}\n            {/*        <Controls.Select*/}\n            {/*            name=\"cat\"*/}\n            {/*            label=\"Category\"*/}\n            {/*            value={values.cat}*/}\n            {/*            {...(props.editable || props.editable == undefined ? {onChange: handleInputChange} : {})}*/}\n            {/*            options={[\"asset\", \"device\"]}*/}\n            {/*            // error={errors.departmentId}*/}\n            {/*        />*/}\n\n            {/*        <Controls.Select*/}\n            {/*            name=\"entityType\"*/}\n            {/*            label=\"Entity Type\"*/}\n            {/*            value={values.entityType}*/}\n            {/*            {...(props.editable || props.editable == undefined ? {onChange: handleInputChange} : {})}*/}\n            {/*            options={entityTypes}*/}\n            {/*            // error={errors.departmentId}*/}\n            {/*        />*/}\n\n            {/*    </Grid>*/}\n            {/*    {values.cat === \"device\" && (*/}\n            {/*        <Grid item xs={6}>*/}\n\n            {/*            <Controls.Select*/}\n            {/*                name=\"vendor\"*/}\n            {/*                label=\"Vendor\"*/}\n            {/*                value={values.vendor || ''}*/}\n            {/*                {...(props.editable || props.editable == undefined ? {onChange: handleInputChange} : {})}*/}\n            {/*                options={vendors}*/}\n            {/*                error={errors.vendor}*/}\n            {/*            />*/}\n            {/*            <Controls.Select*/}\n            {/*                name=\"model\"*/}\n            {/*                label=\"Model\"*/}\n            {/*                value={values.model || ''}*/}\n            {/*                {...(props.editable || props.editable == undefined ? {onChange: handleInputChange} : {})}*/}\n            {/*                options={models}*/}\n            {/*                error={errors.model}*/}\n            {/*            />*/}\n            {/*        </Grid>)*/}\n            {/*    }*/}\n            {/*    {entities !== \"\" && (*/}\n\n            {/*        <MultiSelect*/}\n            {/*            options={*/}\n            {/*                entities.map((item)=>(*/}\n            {/*                    item.name*/}\n            {/*                ))*/}\n            {/*            }*/}\n            {/*        >*/}\n            {/*        </MultiSelect>*/}\n            {/*    )}*/}\n            {/*    <div>*/}\n            {/*        <Controls.Button*/}\n            {/*            type=\"submit\"*/}\n            {/*            text=\"Submit\"*/}\n            {/*        />*/}\n            {/*    </div>*/}\n\n            {/*</Grid>*/}\n        </Form>\n\n    )\n}\n\nexport default React.memo(RelForm)"]},"metadata":{},"sourceType":"module"}