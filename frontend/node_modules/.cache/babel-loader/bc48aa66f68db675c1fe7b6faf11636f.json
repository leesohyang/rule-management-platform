{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableLDR.js\";\nimport React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\n\nimport { Field } from \"redux-form\"; // import Table from \"react-table\";\n\nimport Table from \"react-table\";\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport { avatarColumnProps } from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport { useSelector } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport { addedField, currEd, deleteTmp, editZero, getAllR, hisFlag, keyFieldSelect, openSelectKeyFieldPop, restoreHead, restoreVersion, saveVersion, selectHead, startHis } from \"../../services/Redux/actions\";\nimport { bindActionCreators } from 'redux';\nimport { addTmp, revRe, openPop } from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport { apiProvider } from \"../../services/Provider\";\nimport \"./style.scss\";\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GridTableLDR extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: null,\n      selected: {},\n      selectAll: 0,\n      adding: false,\n      columns: [],\n      selectEdit: false,\n      willRemoved: []\n    };\n    this.selectList = {\n      typeList: [\"String\", \"Numeric\", \"IP\"],\n      groupList: [\"Required\", \"Additional\"]\n    };\n\n    this.getSelect = (type, curr) => {\n      const v = this.selectList[type].filter(i => i !== curr);\n      return v;\n    };\n\n    this.resetColumn = () => {\n      this.setState(state => {\n        return { ...state,\n          columns: [{\n            columns: [{\n              id: \"checkbox\",\n              accessor: \"\",\n              Cell: ({\n                original\n              }) => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selected[original.id] === true,\n                  onChange: () => this.toggleRow(original.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 41\n                }, this);\n              },\n              Header: x => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selectAll === 1,\n                  ref: input => {\n                    if (input) {\n                      input.indeterminate = this.state.selectAll === 2;\n                    }\n                  },\n                  onChange: () => this.toggleSelectAll()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 41\n                }, this);\n              },\n              sortable: false,\n              width: 45\n            }]\n          }].concat(this.props.columns.slice().map(item => {\n            return { ...item,\n              ...this.editableColumnProps\n            };\n          })).concat({\n            Header: \"\",\n            maxWidth: 90,\n            filterable: false,\n            getProps: this.getActionProps,\n            Cell: ActionsCell\n          })\n        };\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      const restore = prevProps.edited !== this.props.edited;\n      const ver = prevProps.version !== this.props.version;\n      const resHead = prevProps.headRestore !== this.props.headRestore;\n      const cond = prevProps.refre !== this.props.refre;\n      const nField = prevProps.newField !== this.props.newField;\n      const col = prevProps.header !== this.props.header;\n\n      if (cond && this.props.refre && this.props.edited == 0) {\n        this.setState({\n          editing: null\n        });\n        this.adjustColumn(true);\n      }\n\n      if (this.props.edited !== 0 && restore) {\n        this.adjustColumn(false);\n      }\n\n      if (col) {\n        this.resetColumn();\n      }\n\n      if (cond) {\n        this.props.handleHeadVer(this.props.version);\n        this.resetColumn();\n        this.props.handleData();\n      }\n\n      if (resHead && this.props.headRestore) {\n        console.log(this.props.data[0].ver);\n        this.props.restoreVer(this.props.data[0].ver);\n        this.props.handleHeadVer(this.props.data[0].ver);\n        this.props.resHead(false);\n      }\n\n      if (nField) {\n        const nCol = this.state.columns;\n        nCol.splice(-1, 0, {\n          Header: this.props.newField,\n          accessor: this.props.newField,\n          ...this.editableColumnProps\n        });\n        this.setState(state => {\n          return { ...state,\n            columns: nCol\n          };\n        });\n      }\n\n      if (ver) {\n        this.handleSaveNewVer();\n      }\n    };\n\n    this.selectableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'select' : 'p';\n\n      const children = //여기 value 에 직접 넣을 수 있으면 좋을텐데.\n      !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 26\n      }, this) || /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this), this.getSelect(\"typeList\", value).map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 72\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.editableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {}); //input안에 name있음 이거 가지고 action넣으면 되지 않을까\n\n      const Component = editing ? 'input' : 'p';\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 26\n      }, this) || undefined;\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.isSelectField = col => [\"type\", \"group\"].indexOf(col) !== -1;\n\n    this.editableColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n          editing,\n          props\n        };\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: props.column.id,\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.handleCellClick = data => {// this.props.handleRow(data)\n    };\n\n    this.getActionProps = (gridState, rowProps) => rowProps && {\n      mode: this.state.editing === rowProps.original ? this.state.adding ? \"add\" : \"edit\" : \"view\",\n      actions: {\n        onEdit: () => {\n          !this.state.adding && this.setState({\n            editing: rowProps.original,\n            adding: false\n          });\n        },\n        onCancel: () => {\n          this.setState({\n            editing: null,\n            adding: false\n          });\n          this.state.adding && this.props.delTmp(this.props.data.length);\n        }\n      }\n    } || {};\n\n    this.handleSubmit = values => {\n      console.log(\"why not cancel?\"); //TODO::cancel이 일로가는구나 버튼이 작아서 잘리네 잘 눌러야함..\n\n      this.setState(state => {\n        this.props.addTmp(this.props.data.map(item => {\n          return item.id === values.id ? values : item;\n        }));\n        return state.adding ? { ...state,\n          adding: false\n        } : { ...state\n        };\n      });\n    };\n\n    this.adjustColumn = flag => {\n      const last = this.state.columns[this.state.columns.length - 1];\n      const tmp = this.state.columns.slice().splice(0, this.state.columns.length - 1);\n      last.show = flag;\n      this.setState({\n        columns: [...tmp, last]\n      });\n    };\n\n    this.handleConFieldSelect = ob => {\n      this.props.setKfOb(ob); //TODO::\n\n      this.props.openConSelectPopup();\n    };\n\n    this.handleKeyFieldSelect = ob => {\n      console.log(ob);\n      this.props.setKfOb(ob);\n      this.props.openKeySelectPopup();\n    };\n\n    this.handleFieldAdd = () => {\n      this.props.openSelectPopup();\n    };\n\n    this.handleGridData = async version => {\n      this.state.willRemoved.length && this.state.willRemoved.forEach(id => {\n        apiProvider.delNormal(\"rules\", parseInt(id)).then(() => this.setState({\n          willRemoved: []\n        }));\n      }); //upsert 로직 추가\n\n      this.adjustColumn(true); //--\n\n      apiProvider.delAll('rules').then(await Promise.all(this.props.data.map(item => {\n        //사실 여기서 버전을 제외하고는 업데이트가 되어 있을 것.\n        this.props.addf(item, version);\n      }))); // console.log(this.props.data.map(({ver, ...other}) => {\n      //     return Object.assign({}, other, {ver: version})\n      // }))\n\n      const history = {\n        id: \"1\",\n        desc: \"temp\",\n        user: \"admin\",\n        released: \"false\",\n        value: {\n          field: this.props.data.map(({\n            ver,\n            ...other\n          }) => {\n            return Object.assign({}, other, {\n              ver: version\n            });\n          })\n        } //props 수정이 덜 되어서..\n\n      };\n      console.log(history);\n      apiProvider.insert('history/livedetectrule', history).then(() => {\n        this.props.hisFlag(true);\n      });\n      console.log(this.props.data);\n    };\n\n    this.handleSaveNewVer = () => {\n      console.log(this.props.version);\n      const temp = this.state.columns.slice();\n      temp.splice(0, 1);\n      temp.splice(-1, 1);\n      console.log(temp.map(({\n        Header\n      }) => Header));\n      const header = {\n        ver: this.props.version,\n        type: \"live\",\n        header: temp.map(({\n          Header\n        }) => Header)\n      }; // apiProvider.insertHead(header).then()\n\n      apiProvider.deActiveHead().then(() => apiProvider.insertHead(header).then(() => this.handleGridData(this.props.version))); // this.props.insertHead(header)\n      // this.handleGridData()\n    };\n\n    this.handleSaveSameVer = version => {\n      // this.props.activeHead(version)\n      apiProvider.deActiveHead().then(apiProvider.activeHead(version).then(() => this.handleGridData(version))); // this.handleGridData()\n    };\n\n    this.handleSave = () => {\n      // const temp = this.state.columns\n      // temp.splice(0, 1)\n      // temp.splice(-1, 1)\n      //밑에 조건 둘 중 무조건 하나만 실행됨. 그래야함..\n      if (this.props.columns.length != this.state.columns.length - 2) this.props.openSave();else if (this.props.versionTmp !== \"\") this.handleSaveSameVer(this.props.versionTmp);else this.handleGridData(this.props.version);\n    };\n\n    this.handleDelete = () => {\n      console.log(Object.keys(this.state.selected));\n      Object.keys(this.state.selected).forEach(i => this.props.delTmp(i));\n      this.setState(state => {\n        return { ...state,\n          selected: {},\n          willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n        };\n      });\n    };\n\n    this.handleAdd = () => {\n      const addTemp = this.state.columns.slice();\n      addTemp.splice(-1, 1);\n      addTemp.splice(0, 1);\n      const tp = {};\n      addTemp.forEach(({\n        accessor\n      }) => {\n        tp[accessor] = \"\";\n      });\n      tp.id = this.props.data.length + 1;\n      console.log(this.props.data.length);\n      this.setState(state => {\n        return { ...state,\n          editing: tp,\n          adding: true\n        };\n      });\n      console.log(tp);\n      this.props.addTmp([tp, ...this.props.data]);\n    };\n\n    this.handleClickPopUp = (columnId, data) => {\n      switch (columnId) {\n        case \"keyField\":\n          return this.handleKeyFieldSelect(data);\n\n        case \"confirms\":\n          return this.handleConFieldSelect(data);\n\n        default:\n          return;\n      }\n    };\n\n    this.fetchData = (state, instance) => {\n      apiProvider.getRowCounts().then(res => this.setState({\n        totalRows: res\n      }));\n      this.setState({\n        loading: true\n      });\n      const offset = state.page * state.pageSize;\n      console.log(state.page);\n      const limit = state.pageSize;\n      state.filtered.length ? this.sendWithQuery(state.filtered, offset, limit, state.pageSize) : this.props.getData(offset, limit).then(res => {\n        this.setState({\n          loading: false,\n          pages: Math.ceil(this.state.totalRows / state.pageSize)\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    //for test\n    this.resetColumn();\n    this.props.handleData();\n  }\n\n  toggleRow(id) {\n    const newSelected = Object.assign({}, this.state.selected);\n    newSelected[id] = !this.state.selected[id];\n    this.setState({\n      selected: newSelected,\n      selectAll: 2\n    });\n    console.log(this.state.selected);\n  }\n\n  toggleSelectAll() {\n    let newSelected = {};\n    console.log(this.state.selected);\n\n    if (this.state.selectAll === 0) {\n      this.props.data.forEach(x => {\n        newSelected[x.id] = true;\n      });\n    }\n\n    this.setState({\n      selected: newSelected,\n      selectAll: this.state.selectAll === 0 ? 1 : 0\n    });\n  }\n\n  render() {\n    const tableProps = this.props.edited == 0 ? {\n      manual: true,\n      pages: this.state.pages,\n      onFetchData: this.fetchData\n    } : {\n      manual: false\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleAdd,\n          disabled: this.props.edited !== 0,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleDelete,\n          disabled: this.props.edited !== 0,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            this.props.editZero();\n            this.props.revRe(true);\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seperate-bar-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            this.handleFieldAdd();\n          },\n          children: \"Field Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.openPop(true),\n          disabled: this.props.edited !== 0,\n          children: \"\\uBC30\\uD3EC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Fixed\",\n          children: /*#__PURE__*/_jsxDEV(FormProvider, {\n            form: \"inline\",\n            onSubmit: this.handleSubmit,\n            onSubmitSuccess: () => this.setState({\n              editing: null\n            }),\n            initialValues: this.state.editing,\n            enableReinitialize: true,\n            children: formProps => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: formProps.handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Table, {\n                  getTdProps: (state, rowInfo, column) => ({\n                    onClick: () => rowInfo !== undefined && this.state.editing ? this.handleClickPopUp(column.id, rowInfo.original) : undefined\n                  }),\n                  columns: this.state.columns,\n                  data: this.props.data // PaginationComponent={Pagination}\n                  ,\n                  pageSizeOptions: [1, 10, 500, 1000],\n                  defaultPageSize: 10,\n                  sorted: [{\n                    id: 'id'\n                  }] // defaultPageSize={10}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 41\n                }, this), this.props.selectKPop && /*#__PURE__*/_jsxDEV(SelectKeyFieldPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 67\n                }, this), this.props.selectCPop && /*#__PURE__*/_jsxDEV(SelectConfirmsPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  version: state.fetchAPI.headVersion,\n  versionTmp: state.fetchAPI.headVersionTmp,\n  selectKPop: state.fetchAPI.openKeyField,\n  selectCPop: state.fetchAPI.openConField,\n  kfOb: state.fetchAPI.keyField,\n  data: state.fetchAPI.data,\n  refre: state.fetchAPI.refre,\n  add: state.fetchAPI.ad,\n  hflag: state.fetchAPI.hflag,\n  newField: state.fetchAPI.addedField,\n  header: state.fetchAPI.header,\n  headRestore: state.fetchAPI.headRestore,\n  his: state.fetchAPI.startHistory,\n  edited: state.fetchAPI.edited\n}), dispatch => {\n  return bindActionCreators({\n    setKfOb: keyFieldSelect,\n    addTmp: addTmp,\n    revRe: revRe,\n    openPop: openPop,\n    delTmp: deleteTmp,\n    currEd: currEd,\n    hisFlag: hisFlag,\n    addedField: addedField,\n    setHead: selectHead,\n    resHead: restoreHead,\n    saveVer: saveVersion,\n    restoreVer: restoreVersion,\n    startHis: startHis,\n    editZero: editZero,\n    getData: apiProvider.getNormalizeRule //TODO::바꿔\n\n  }, dispatch);\n})(GridTableLDR);","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableLDR.js"],"names":["React","set","Field","Table","BS","initialData","FormProvider","avatarColumnProps","ActionsCell","HighlightCell","GridFilters","useSelector","connect","fetchAPI","addedField","currEd","deleteTmp","editZero","getAllR","hisFlag","keyFieldSelect","openSelectKeyFieldPop","restoreHead","restoreVersion","saveVersion","selectHead","startHis","bindActionCreators","addTmp","revRe","openPop","Pagination","apiProvider","SelectKeyFieldPopup","SelectConfirmsPopup","GridTableLDR","Component","state","editing","selected","selectAll","adding","columns","selectEdit","willRemoved","selectList","typeList","groupList","getSelect","type","curr","v","filter","i","resetColumn","setState","id","accessor","Cell","original","toggleRow","Header","x","input","indeterminate","toggleSelectAll","sortable","width","concat","props","slice","map","item","editableColumnProps","maxWidth","filterable","getProps","getActionProps","componentDidUpdate","prevProps","restore","edited","ver","version","resHead","headRestore","cond","refre","nField","newField","col","header","adjustColumn","handleHeadVer","handleData","console","log","data","restoreVer","nCol","splice","handleSaveNewVer","selectableComponent","value","rest","result","Object","keys","reduce","prev","current","toLowerCase","children","index","editableComponent","undefined","isSelectField","indexOf","fieldProps","component","column","handleCellClick","gridState","rowProps","mode","actions","onEdit","onCancel","delTmp","length","handleSubmit","values","flag","last","tmp","show","handleConFieldSelect","ob","setKfOb","openConSelectPopup","handleKeyFieldSelect","openKeySelectPopup","handleFieldAdd","openSelectPopup","handleGridData","forEach","delNormal","parseInt","then","delAll","Promise","all","addf","history","desc","user","released","field","other","assign","insert","temp","deActiveHead","insertHead","handleSaveSameVer","activeHead","handleSave","openSave","versionTmp","handleDelete","handleAdd","addTemp","tp","handleClickPopUp","columnId","fetchData","instance","getRowCounts","res","totalRows","loading","offset","page","pageSize","limit","filtered","sendWithQuery","getData","pages","Math","ceil","componentDidMount","newSelected","render","tableProps","manual","onFetchData","formProps","rowInfo","onClick","selectKPop","selectCPop","headVersion","headVersionTmp","openKeyField","openConField","kfOb","keyField","add","ad","hflag","his","startHistory","dispatch","setHead","saveVer","getNormalizeRule"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\nimport {Field} from \"redux-form\";\n// import Table from \"react-table\";\nimport Table from \"react-table\"\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport {avatarColumnProps} from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport {useSelector} from \"react-redux\";\nimport {connect} from \"react-redux\"\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport {\n    addedField,\n    currEd,\n    deleteTmp, editZero,\n    getAllR,\n    hisFlag,\n    keyFieldSelect,\n    openSelectKeyFieldPop, restoreHead, restoreVersion, saveVersion, selectHead, startHis\n} from \"../../services/Redux/actions\";\nimport {bindActionCreators} from 'redux';\nimport {addTmp, revRe, openPop} from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport {apiProvider} from \"../../services/Provider\";\nimport \"./style.scss\"\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\n\n\nclass GridTableLDR extends React.Component {\n    state = {editing: null, selected: {}, selectAll: 0, adding: false, columns: [], selectEdit: false, willRemoved: []};\n\n    selectList = {\n        typeList: [\"String\", \"Numeric\", \"IP\"],\n        groupList: [\"Required\", \"Additional\"]\n    }\n\n    getSelect = (type, curr) => {\n        const v = this.selectList[type].filter(i => i !== curr)\n        return v\n    }\n\n    resetColumn = () => {\n        this.setState((state) => {\n            return {\n                ...state, columns:\n                    [{\n                        columns: [\n                            {\n                                id: \"checkbox\",\n                                accessor: \"\",\n                                Cell: ({original}) => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selected[original.id] === true}\n                                            onChange={() => this.toggleRow(original.id)}\n                                        />\n                                    );\n                                },\n                                Header: x => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selectAll === 1}\n                                            ref={input => {\n                                                if (input) {\n                                                    input.indeterminate = this.state.selectAll === 2;\n                                                }\n                                            }}\n                                            onChange={() => this.toggleSelectAll()}\n                                        />\n                                    );\n                                },\n                                sortable: false,\n                                width: 45\n                            },\n                        ]\n                    }].concat(\n                        this.props.columns.slice().map((item) => {\n                            return {...item, ...this.editableColumnProps}\n                        })\n                    )\n                        .concat(\n                            {\n                                Header: \"\",\n                                maxWidth: 90,\n                                filterable: false,\n                                getProps: this.getActionProps,\n                                Cell: ActionsCell\n                            }\n                        )\n            }\n        })\n    }\n\n    componentDidMount() {\n//for test\n        this.resetColumn()\n        this.props.handleData()\n    }\n\n    componentDidUpdate = (prevProps) => {\n\n        const restore = (prevProps.edited !== this.props.edited)\n        const ver = (prevProps.version !== this.props.version)\n        const resHead = (prevProps.headRestore !== this.props.headRestore)\n        const cond = (prevProps.refre !== this.props.refre)\n        const nField = (prevProps.newField !== this.props.newField)\n        const col = (prevProps.header !== this.props.header)\n\n        if (cond && this.props.refre && this.props.edited == 0) {\n            this.setState({editing: null})\n            this.adjustColumn(true)\n        }\n        if (this.props.edited !== 0 && restore) {\n            this.adjustColumn(false)\n        }\n        if (col) {\n            this.resetColumn()\n        }\n        if (cond) {\n            this.props.handleHeadVer(this.props.version)\n            this.resetColumn()\n            this.props.handleData()\n        }\n        if (resHead && this.props.headRestore) {\n            console.log(this.props.data[0].ver)\n            this.props.restoreVer(this.props.data[0].ver)\n            this.props.handleHeadVer(this.props.data[0].ver)\n            this.props.resHead(false)\n        }\n        if (nField) {\n            const nCol = this.state.columns\n            nCol.splice(-1, 0, {\n                Header: this.props.newField,\n                accessor: this.props.newField, ...this.editableColumnProps\n            })\n            this.setState((state) => {\n                return {\n                    ...state, columns: nCol\n                }\n            })\n        }\n        if (ver) {\n            this.handleSaveNewVer()\n        }\n    }\n\n\n    selectableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'select' : 'p';\n        const children = //여기 value 에 직접 넣을 수 있으면 좋을텐데.\n            (!editing && <HighlightCell value={value} {...rest} />) || <React.Fragment>\n                <option>{value}</option>\n                {this.getSelect(\"typeList\", value).map(\n                    (item, index) => (\n                        <option key={index} value={item}>{item}</option>\n                    )\n                )}\n            </React.Fragment>;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n\n    editableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        //input안에 name있음 이거 가지고 action넣으면 되지 않을까\n        const Component = editing ? 'input' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n    isSelectField = (col) => [\"type\", \"group\"].indexOf(col) !== -1\n\n    editableColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n            const editing = this.state.editing === props.original;\n            const fieldProps = {\n                component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n                editing,\n                props\n            };\n            return <Field name={props.column.id} {...fieldProps} />;\n\n        }\n    };\n\n    handleCellClick = (data) => {\n        // this.props.handleRow(data)\n    }\n\n    getActionProps = (gridState, rowProps) =>\n        (rowProps && {\n            mode: this.state.editing === rowProps.original ? (this.state.adding ? \"add\" : \"edit\") : \"view\",\n\n            actions: {\n                onEdit: () => {\n                    !this.state.adding && this.setState({editing: rowProps.original, adding: false})\n                },\n                onCancel: () => {\n                    this.setState({editing: null, adding: false});\n                    this.state.adding && this.props.delTmp(this.props.data.length)\n                }\n            }\n        }) ||\n        {};\n\n    toggleRow(id) {\n        const newSelected = Object.assign({}, this.state.selected);\n        newSelected[id] = !this.state.selected[id];\n        this.setState({\n            selected: newSelected,\n            selectAll: 2\n        });\n        console.log(this.state.selected)\n    }\n\n    toggleSelectAll() {\n        let newSelected = {};\n        console.log(this.state.selected)\n        if (this.state.selectAll === 0) {\n            this.props.data.forEach(x => {\n                newSelected[x.id] = true;\n            });\n        }\n\n        this.setState({\n            selected: newSelected,\n            selectAll: this.state.selectAll === 0 ? 1 : 0\n        });\n    }\n\n    handleSubmit = (values) => {\n        console.log(\"why not cancel?\") //TODO::cancel이 일로가는구나 버튼이 작아서 잘리네 잘 눌러야함..\n        this.setState((state) => {\n            this.props.addTmp(this.props.data.map((item) => {\n                return item.id === values.id ? values : item\n            }))\n\n            return state.adding ? {...state, adding: false} : {...state}\n\n        });\n    };\n\n    adjustColumn = (flag) => {\n        const last = this.state.columns[this.state.columns.length - 1]\n        const tmp = this.state.columns.slice().splice(0, this.state.columns.length - 1)\n        last.show = flag\n        this.setState({\n            columns: [\n                ...tmp,\n                last\n            ]\n        })\n    }\n    handleConFieldSelect = (ob) => {\n        this.props.setKfOb(ob) //TODO::\n        this.props.openConSelectPopup()\n    }\n    handleKeyFieldSelect = (ob) => {\n        console.log(ob)\n        this.props.setKfOb(ob)\n        this.props.openKeySelectPopup()\n    }\n\n    handleFieldAdd = () => {\n        this.props.openSelectPopup()\n    }\n\n    handleGridData = async (version) => {\n\n        this.state.willRemoved.length && this.state.willRemoved.forEach((id)=>{\n            apiProvider.delNormal(\"rules\",parseInt(id)).then(()=>this.setState({willRemoved:[]}))\n        })\n        //upsert 로직 추가\n        this.adjustColumn(true)\n\n\n        //--\n        apiProvider.delAll('rules').then(\n            await Promise.all(this.props.data.map((item) => { //사실 여기서 버전을 제외하고는 업데이트가 되어 있을 것.\n                this.props.addf(item, version)\n            }))\n        )\n        // console.log(this.props.data.map(({ver, ...other}) => {\n        //     return Object.assign({}, other, {ver: version})\n        // }))\n        const history = {\n            id: \"1\",\n            desc: \"temp\",\n            user: \"admin\",\n            released: \"false\",\n            value: {\n                field: this.props.data.map(({ver, ...other}) => {\n                    return Object.assign({}, other, {ver: version})\n                })\n            } //props 수정이 덜 되어서..\n        }\n        console.log(history)\n        apiProvider.insert('history/livedetectrule', history).then(() => {\n            this.props.hisFlag(true)\n        })\n\n        console.log(this.props.data)\n    }\n\n    handleSaveNewVer = () => {\n        console.log(this.props.version)\n        const temp = this.state.columns.slice()\n        temp.splice(0, 1)\n        temp.splice(-1, 1)\n        console.log(temp.map(({Header}) => Header))\n        const header = {\n            ver: this.props.version,\n            type: \"live\",\n            header: temp.map(({Header}) => Header)\n        }\n        // apiProvider.insertHead(header).then()\n        apiProvider.deActiveHead().then(\n            () => apiProvider.insertHead(header).then(() => this.handleGridData(this.props.version))\n        )\n        // this.props.insertHead(header)\n        // this.handleGridData()\n    }\n\n    handleSaveSameVer = (version) => {\n        // this.props.activeHead(version)\n        apiProvider.deActiveHead().then(\n            apiProvider.activeHead(version).then(\n                () => this.handleGridData(version)\n            ))\n        // this.handleGridData()\n    }\n    //체크해야 되는게 291라인과 298라인 아닌가?\n    handleSave = () => {\n        // const temp = this.state.columns\n        // temp.splice(0, 1)\n        // temp.splice(-1, 1)\n        //밑에 조건 둘 중 무조건 하나만 실행됨. 그래야함..\n        if (this.props.columns.length != this.state.columns.length - 2) this.props.openSave()\n        else if (this.props.versionTmp !== \"\") this.handleSaveSameVer(this.props.versionTmp)\n        else this.handleGridData(this.props.version)\n\n    }\n\n    handleDelete = () => {\n        console.log(Object.keys(this.state.selected))\n        Object.keys(this.state.selected).forEach((i) =>\n            this.props.delTmp(i)\n        )\n        this.setState((state) => {\n            return {\n                ...state,\n                selected: {},\n                willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n            }\n        })\n\n    }\n\n    //TODO::add 여러번 하게하면 안됨. + 자동으로 index 생성되게 해야되는데 + livedetectrule add row가 이상한곳에 생김. 왠진 모르겠는데 해결됨.\n    handleAdd = () => {\n        const addTemp = this.state.columns.slice()\n        addTemp.splice(-1, 1)\n        addTemp.splice(0, 1)\n        const tp = {};\n        addTemp.forEach(({accessor}) => {\n            tp[accessor] = \"\"\n        })\n        tp.id = this.props.data.length + 1\n        console.log(this.props.data.length)\n        this.setState((state) => {\n            return {...state, editing: tp, adding: true}\n        })\n        console.log(tp)\n        this.props.addTmp([tp, ...this.props.data])\n    }\n\n\n    handleClickPopUp = (columnId, data) => {\n        switch (columnId) {\n            case \"keyField\" :\n                return this.handleKeyFieldSelect(data)\n            case \"confirms\" :\n                return this.handleConFieldSelect(data)\n            default:\n                return\n        }\n    }\n\n    fetchData = (state, instance) => {\n\n        apiProvider.getRowCounts().then((res) => this.setState({totalRows: res}))\n        this.setState({loading: true})\n        const offset = state.page * state.pageSize\n        console.log(state.page)\n        const limit = state.pageSize\n\n        state.filtered.length ? (\n            this.sendWithQuery(state.filtered, offset, limit, state.pageSize)\n        ) : (\n            this.props.getData(offset, limit).then((res) => {\n                this.setState({loading: false, pages: Math.ceil(this.state.totalRows / state.pageSize)})\n            }))\n    }\n\n    render() {\n        const tableProps = this.props.edited == 0 ? {\n            manual: true,\n            pages: this.state.pages,\n            onFetchData: this.fetchData\n        } : {\n            manual: false\n        }\n        return (\n            <React.Fragment>\n\n                <div className=\"btns\">\n                    <button className=\"btn\" onClick={this.handleAdd} disabled={this.props.edited !== 0}>\n                        Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleDelete} disabled={this.props.edited !== 0}>\n                        Delete\n                    </button>\n                    <button className=\"btn\" onClick={() => {\n                        this.props.editZero();\n                        this.props.revRe(true)\n                    }}>\n                        Refresh\n                    </button>\n\n                    <div className=\"seperate-bar-100\"/>\n\n                    <button className=\"btn\" onClick={() => {\n                        this.handleFieldAdd()\n                    }}>\n                        Field Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleSave}>\n                        Save\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.openPop(true)} disabled={this.props.edited !== 0}>\n                        배포\n                    </button>\n                </div>\n                <div className=\"table-wrapper\">\n                    <div className=\"Fixed\">\n\n                        <FormProvider\n                            form=\"inline\"\n                            onSubmit={this.handleSubmit}\n                            onSubmitSuccess={() => this.setState({editing: null})}\n                            initialValues={this.state.editing}\n                            enableReinitialize\n                        >\n                            {(formProps) => {\n                                return (\n                                    <form onSubmit={formProps.handleSubmit}>\n                                        <Table\n                                            getTdProps={(state, rowInfo, column) => ({\n                                                onClick: () => (rowInfo !== undefined && this.state.editing) ? this.handleClickPopUp(column.id, rowInfo.original) : undefined\n                                            })}\n                                            columns={\n                                                this.state.columns\n                                            }\n                                            data={this.props.data}\n                                            // PaginationComponent={Pagination}\n                                            pageSizeOptions={[1, 10, 500, 1000]}\n                                            defaultPageSize={10}\n                                            sorted={[{id: 'id'}]}\n\n                                            // defaultPageSize={10}\n                                        />\n                                        {this.props.selectKPop && <SelectKeyFieldPopup></SelectKeyFieldPopup>}\n                                        {this.props.selectCPop && <SelectConfirmsPopup></SelectConfirmsPopup>}\n                                    </form>\n                                );\n                            }}\n                        </FormProvider>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        version: state.fetchAPI.headVersion,\n        versionTmp: state.fetchAPI.headVersionTmp,\n        selectKPop: state.fetchAPI.openKeyField,\n        selectCPop: state.fetchAPI.openConField,\n        kfOb: state.fetchAPI.keyField,\n        data: state.fetchAPI.data,\n        refre: state.fetchAPI.refre,\n        add: state.fetchAPI.ad,\n        hflag: state.fetchAPI.hflag,\n        newField: state.fetchAPI.addedField,\n        header: state.fetchAPI.header,\n        headRestore: state.fetchAPI.headRestore,\n        his: state.fetchAPI.startHistory,\n\n        edited: state.fetchAPI.edited,\n    }),\n    dispatch => {\n        return bindActionCreators(\n            {\n                setKfOb: keyFieldSelect,\n                addTmp: addTmp,\n                revRe: revRe,\n                openPop: openPop,\n                delTmp: deleteTmp,\n                currEd: currEd,\n                hisFlag: hisFlag,\n                addedField: addedField,\n                setHead: selectHead,\n                resHead: restoreHead,\n                saveVer: saveVersion,\n                restoreVer: restoreVersion,\n                startHis: startHis,\n\n                editZero: editZero,\n                getData: apiProvider.getNormalizeRule //TODO::바꿔\n            },\n            dispatch\n        )\n    }\n)(GridTableLDR)"]},"metadata":{},"sourceType":"module"}