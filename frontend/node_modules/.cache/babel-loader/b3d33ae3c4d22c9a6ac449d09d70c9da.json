{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/pages/NormalizeRule/NormalizeRuleDetailTable.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport { apiProvider } from \"../../services/Provider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport \"../../components/table/style.scss\";\nimport { revAd, revRe, revOp, clickedOp, currType, getAllR, openSelectPop, openSelectKeyFieldPop, openSelectConFieldPop, openSavePop, clearClicked, addTmp, deleteTmp, keyFieldSelect, openPop, currEd, hisFlag, addedField, selectHead, clickedOpt } from \"../../services/Redux/actions\";\nimport ReleasePopup from \"../../components/popup/ReleasePopup\";\nimport GridTable from \"../../components/table/gridTable\"; // import \"react-table/react-table.css\";\n\nimport SelectFieldPopup from \"../../components/popup/SelectFieldPopup\";\nimport SelectKeyFieldPopup from \"../../components/popup/SelectKeyFieldPopup\";\nimport GridTableLDR from \"../../components/table/gridTableLDR\";\nimport SavePopup from \"../../components/popup/SavePopup\";\nimport GridTableH from \"../../components/table/gridTableH\";\nimport SlideTmp from \"../Asset/AssetSlide\";\nimport GridTableNormal from \"../../components/table/gridTableNormal\";\nimport SlidingPane from \"react-sliding-pane\";\nimport FormProvider from \"../../components/table/FormProvider\";\nimport Table from \"react-table\";\nimport SelectConfirmsPopup from \"../../components/popup/SelectConfirmsPopup\";\nimport ActionsCell from \"../../components/table/ActionsCell\";\nimport { bindActionCreators } from \"redux\";\nimport GridFilters from \"../../components/table/GridFilters\";\nimport { change, Field, reset } from \"redux-form\";\nimport HighlightCell from \"../../components/table/HighlightCell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NormalizeRuleDetailTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      refre: false,\n      editing: false,\n      selected: {},\n      selectAll: 0,\n      adding: false,\n      columns: [],\n      selectEdit: false,\n      forsubmit: false,\n      clickedData: {\n        ruleId: \"\",\n        sample: \"\",\n        rule: \"\",\n        arrange: []\n      },\n      // clickedRule: {},\n      editArrange: false\n    };\n    this.vendorList = [];\n    this.typeList = [];\n    this.formatList = [];\n\n    this.resetColumns = () => {\n      this.setState(state => {\n        return { ...state,\n          columns: [{\n            columns: [{\n              id: \"checkbox\",\n              accessor: \"\",\n              Cell: ({\n                original\n              }) => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selected[original.ruleId] === true,\n                  onChange: () => this.toggleRow(original.ruleId)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 45\n                }, this);\n              },\n              Header: x => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selectAll === 1,\n                  ref: input => {\n                    if (input) {\n                      input.indeterminate = this.state.selectAll === 2;\n                    }\n                  },\n                  onChange: () => this.toggleSelectAll()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 45\n                }, this);\n              },\n              sortable: false,\n              width: 45\n            }]\n          }, {\n            Header: \"RuleId\",\n            accessor: \"ruleId\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"Vendor\",\n            accessor: \"vendor\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"Type\",\n            accessor: \"type\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"Log Format\",\n            accessor: \"format\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"Confirm\",\n            accessor: \"confirm\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"Priority\",\n            accessor: \"priority\",\n            ...this.editableColumnProps\n          }, {\n            Header: \"\",\n            maxWidth: 90,\n            filterable: false,\n            getProps: this.getActionProps,\n            Cell: ActionsCell\n          }]\n        };\n      });\n    };\n\n    this.editableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'input' : 'p';\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 26\n      }, this) || undefined;\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.editableColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.editableComponent,\n          editing,\n          props\n        };\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: props.column.id,\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 20\n        }, this);\n      }\n    };\n    this.editableAllColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editArrange;\n        const fieldProps = {\n          component: this.editableComponent,\n          editing,\n          props\n        };\n        const n = props.original.idx + \",\" + props.column.id;\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: n.toString(),\n          value: \"\",\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.componentDidUpdate = prevProps => {\n      //for arrangeRule submit\n      const t = prevProps.forsubmit !== this.state.forsubmit;\n      const cond = prevProps.refre !== this.state.refre;\n\n      if (t && this.state.forsubmit) {\n        const newRules = this.props.data.rules.slice().map(({\n          ruleId,\n          sample,\n          rule,\n          arrange,\n          ...other\n        }) => {\n          return ruleId == this.state.clickedData.ruleId ? Object.assign({}, this.state.clickedData, other) : Object.assign({}, {\n            ruleId: ruleId,\n            sample: sample,\n            rule: rule,\n            arrange: arrange\n          }, other);\n        });\n        let final = this.props.data;\n        final.rules = newRules;\n        this.props.clickedOp(final);\n        this.setState({\n          forsubmit: false\n        });\n      }\n\n      if (cond && this.state.refre) {\n        //TODO:: original data rollBack\n        //db에 있었던 경우 && 없는경우\n        const test = this.props.originalData.slice().filter(item => item.id == this.props.data.id).shift(); //originalData <-> store.data\n\n        apiProvider.getRow(\"normalizerule\", this.props.data.id).then(data => data !== undefined ? this.props.clickedOp(data) : this.props.clickedOp(test));\n        this.setState({\n          refre: false,\n          selected: {}\n        });\n      }\n    };\n\n    this.getActionProps = (gridState, rowProps) => rowProps && {\n      mode: this.state.editing === rowProps.original ? this.state.adding ? \"add\" : \"edit\" : \"view\",\n      actions: {\n        onEdit: () => {\n          !this.state.adding && this.setState({\n            editing: rowProps.original,\n            adding: false\n          });\n        },\n        onCancel: () => {\n          this.setState({\n            editing: null,\n            adding: false\n          });\n          this.state.adding && this.props.delTmp(Math.max(0, ...this.props.data.rules.slice().map(v => v.ruleId)));\n        }\n      }\n    } || {};\n\n    this.handleClick = row => {\n      this.setState({\n        clickedData: {\n          ruleId: row[\"ruleId\"],\n          sample: row[\"sample\"],\n          rule: row[\"rule\"],\n          arrange: row[\"arrange\"]\n        }\n      });\n    };\n\n    this.handleSave = () => {\n      const venString = this.props.data.rules.slice().map(it => it.vendor).join(',');\n      const d = this.props.data;\n      d.vendors = venString;\n      const newData = this.props.originalData.slice().map(item => {\n        return item.id === d.id ? d : item;\n      });\n      this.props.addTmp(newData);\n    };\n\n    this.handleArrangeCancel = () => {\n      this.props.reset(\"ruleArrange\");\n      this.setState({\n        editArrange: false\n      });\n      const rollBack = this.props.data.rules.slice().filter(it => it.ruleId === this.state.clickedData.ruleId).shift();\n      console.log(rollBack);\n      this.setState({\n        clickedData: {\n          ruleId: rollBack[\"ruleId\"],\n          sample: rollBack[\"sample\"],\n          rule: rollBack[\"rule\"],\n          arrange: rollBack[\"arrange\"]\n        }\n      });\n    };\n\n    this.handleAddVendor = () => {\n      const tp = {\n        ruleId: \"\",\n        vendor: \"\",\n        type: \"\",\n        format: \"\",\n        confirm: \"\",\n        priority: \"\",\n        sample: \"\",\n        rule: \"\",\n        arrange: []\n      };\n      tp.ruleId = (Math.max(0, ...this.props.data.rules.slice().map(v => v.ruleId)) + 1).toString();\n      this.setState({ ...this.state,\n        editing: tp,\n        adding: true\n      });\n      const newCD = { ...this.props.data\n      }; //TODO::진짜 쉿이다. props.data가 변하고 이게 변하니까 props.original.data가 변했구나..\n\n      newCD.rules = [tp, ...newCD.rules];\n      this.props.clickedOp(newCD);\n    };\n\n    this.handleSubmit = values => {\n      this.setState(state => {\n        const newCD = { ...this.props.data\n        }; //TODO::지지\n\n        newCD.rules = newCD.rules.map(item => {\n          return item.ruleId === values.ruleId ? values : item;\n        });\n        this.props.clickedOp(newCD);\n        return state.adding ? { ...state,\n          adding: false\n        } : { ...state\n        };\n      });\n    };\n\n    this.handleSubmit2 = values => {\n      console.log(values);\n      this.setState(state => {\n        return { ...state,\n          forsubmit: true,\n          clickedData: { ...state.clickedData,\n            arrange: Object.values(values).map((item, index) => {\n              return Object.assign({}, item, this.state.clickedData.arrange[index]);\n            })\n          }\n        };\n      });\n    };\n\n    this.handleDelete = () => {\n      const n = (({\n        rules,\n        ...other\n      }) => {\n        return {\n          rules: rules.filter(i => Object.keys(this.state.selected).indexOf(i.ruleId) < 0),\n          ...other\n        };\n      })({ ...this.props.data\n      });\n\n      console.log(n);\n      this.props.clickedOp(n);\n    };\n\n    this.makeParserParams = () => {\n      const {\n        classifier\n      } = this.props.data;\n      const {\n        confirm,\n        format\n      } = this.props.data.rules.slice().filter(item => item.ruleId === this.state.clickedData.ruleId).shift();\n      const {\n        sample,\n        rule\n      } = this.state.clickedData;\n      const toParse = {\n        confirm: confirm,\n        prefix: classifier,\n        //classifier in props.data\n        raw: sample,\n        r_type: format,\n        tokenRule: rule\n      };\n      return JSON.stringify(toParse).replace(/\\\\n/g, \"\\\\n\").replace(/\\\\'/g, \"\\\\'\").replace(/\\\\\"/g, '\\\\\"').replace(/\\\\&/g, \"\\\\&\").replace(/\\\\r/g, \"\\\\r\").replace(/\\\\t/g, \"\\\\t\").replace(/\\\\b/g, \"\\\\b\").replace(/\\\\f/g, \"\\\\f\");\n    };\n\n    this.callParser = async () => {\n      const params = this.makeParserParams();\n      const str = \"{\\\"confirm\\\":\\\"SAPModeNumber=*+>SAPEventSequence=*\\\",\\\"prefix\\\":\\\"*\\\\\\\"SAPRcvID\\\\\\\":-1015614763\\\\\\\"*\\\",\\\"raw\\\":\\\"{\\\\\\\"UserID\\\\\\\":\\\\\\\"미등록IP\\\\\\\",\\\\\\\"EmpName\\\\\\\":\\\\\\\"미등록IP\\\\\\\",\\\\\\\"DeptName\\\\\\\":\\\\\\\"회사\\\\\\\",\\\\\\\"SAPRcvID\\\\\\\":-1015614763,\\\\\\\"SAPRowNumber\\\\\\\":2143402056,\\\\\\\"SAPModeNumber\\\\\\\":3,\\\\\\\"SAPEventSequence\\\\\\\":2411,\\\\\\\"SAPTimeReceived\\\\\\\":1604448001000,\\\\\\\"SAPTimeRequest\\\\\\\":null,\\\\\\\"SAPTimeResponse\\\\\\\":null,\\\\\\\"SAPAccTimeReceived\\\\\\\":null,\\\\\\\"SAPAccTimeRequest\\\\\\\":null,\\\\\\\"SAPAccTimeResponse\\\\\\\":null,\\\\\\\"SAPDataType\\\\\\\":0,\\\\\\\"SAPOKCode\\\\\\\":null,\\\\\\\"SAPTransactionCode\\\\\\\":\\\\\\\"FB03\\\\\\\",\\\\\\\"SAPFuncName\\\\\\\":null,\\\\\\\"SAPDynproName\\\\\\\":\\\\\\\"SAPMF05L\\\\\\\",\\\\\\\"SAPTitleMain\\\\\\\":\\\\\\\"Display Document: Data Entry View\\\\\\\",\\\\\\\"SAPMessage\\\\\\\":\\\\\\\"Invoice document 5105671034 has been posted\\\\\\\",\\\\\\\"SAPPacketSize\\\\\\\":3588,\\\\\\\"SAPAlert\\\\\\\":0,\\\\\\\"SAPSessionGUID\\\\\\\":\\\\\\\"2AC41BC7-9CDB-472C-B2FF-2E4AE66ACFC5\\\\\\\",\\\\\\\"SAPLogType\\\\\\\":0,\\\\\\\"PolicyName\\\\\\\":null,\\\\\\\"PolicyRuleDesc\\\\\\\":null,\\\\\\\"DecideRequestTime\\\\\\\":null,\\\\\\\"DecideResponseTime\\\\\\\":null,\\\\\\\"DecideResponseType\\\\\\\":null,\\\\\\\"DecideOfficerUID\\\\\\\":null,\\\\\\\"AlertPolicyName\\\\\\\":null,\\\\\\\"AlertPolicyRuleDesc\\\\\\\":null,\\\\\\\"AbnormalDataDesc\\\\\\\":null,\\\\\\\"IsCaptured\\\\\\\":0,\\\\\\\"SAPClientIP\\\\\\\":\\\\\\\"10.88.7.210\\\\\\\",\\\\\\\"SAPClientPort\\\\\\\":60958,\\\\\\\"SAPServerIP\\\\\\\":\\\\\\\"168.154.28.74\\\\\\\",\\\\\\\"SAPServerPort\\\\\\\":3200,\\\\\\\"SAPSessTimeReceived\\\\\\\":1604448001000,\\\\\\\"SAPSessTimeLogin\\\\\\\":1604448000000,\\\\\\\"SAPSessAccTimeReceived\\\\\\\":1604448001150,\\\\\\\"SAPSessAccTimeLogin\\\\\\\":1604448000168,\\\\\\\"SAPUserID\\\\\\\":\\\\\\\"PE00024\\\\\\\",\\\\\\\"SAPClient\\\\\\\":\\\\\\\"900\\\\\\\",\\\\\\\"SAPUID\\\\\\\":\\\\\\\"uBBF8uB4F1uB85DIP\\\\\\\",\\\\\\\"SAPSessType\\\\\\\":24,\\\\\\\"eventId\\\\\\\":\\\\\\\"e2a11be9-6ff2-cbeb-30c3-1ffa1b75f173\\\\\\\"}\\\",\\\"r_type\\\":\\\"json\\\",\\\"tokenRule\\\":\\\"SAPTimeRequest\\\\tSAPTimeReceived\\\\tSAPSessTimeLogin\\\\tSAPClientIP\\\\tSAPClientPort\\\\tSAPServerIP\\\\tSAPServerPort\\\\tSAPTitleMain\\\\tSAPMessage\\\\tSAPPacketSize\\\\tAbnormalDataDesc\\\\tSAPUserID\\\\tEmpName\\\\tDeptName\\\\tAlertPolicyName\\\"}\";\n      apiProvider.parse(str).then(data => this.parseNew(data.parsed));\n    };\n\n    this.parseNew = parsedData => {\n      // const resultData = [{\"key\":\"SAPClientPort\",\"value\":\"60958\"},{\"key\":\"SAPTitleMain\",\"value\":\"Display Document: Data Entry View\"}]\n      this.setState(state => {\n        return { ...state,\n          editArrange: true,\n          clickedData: { ...this.state.clickedData,\n            arrange: parsedData\n          }\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.resetColumns();\n  }\n\n  toggleRow(id) {\n    const newSelected = Object.assign({}, this.state.selected);\n    newSelected[id] = !this.state.selected[id];\n    this.setState({\n      selected: newSelected,\n      selectAll: 2\n    });\n  }\n\n  toggleSelectAll() {\n    let newSelected = {};\n\n    if (this.state.selectAll === 0) {\n      this.props.data.rules.forEach(x => {\n        newSelected[x.ruleId] = true;\n      });\n    }\n\n    this.setState({\n      selected: newSelected,\n      selectAll: this.state.selectAll === 0 ? 1 : 0\n    });\n  } //TODO::highlight가 있었으면 좋겠어\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"normalization-rule\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rule-result\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nmlzrule-table-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"header__title\",\n                children: \" Live Detect Rule \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"binder\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btns\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                type: \"button\",\n                onClick: this.handleAddVendor,\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: this.handleDelete,\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => this.setState({\n                  refre: true\n                }),\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"seperate-bar-100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: this.handleSave,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Fixed\",\n                children: /*#__PURE__*/_jsxDEV(FormProvider, {\n                  form: \"rules\",\n                  onSubmit: this.handleSubmit,\n                  onSubmitSuccess: () => {\n                    this.setState({\n                      editing: null\n                    });\n                  },\n                  initialValues: this.state.editing,\n                  enableReinitialize: true,\n                  children: formProps => {\n                    return /*#__PURE__*/_jsxDEV(\"form\", {\n                      onSubmit: formProps.handleSubmit,\n                      children: /*#__PURE__*/_jsxDEV(Table, {\n                        getTdProps: (state, rowInfo, column) => ({\n                          onClick: () => rowInfo !== undefined && !this.state.editing ? this.handleClick(rowInfo.original) : undefined\n                        }),\n                        columns: this.state.columns,\n                        data: this.props.data.rules,\n                        pageSizeOptions: [5, 10, 500, 1000],\n                        defaultPageSize: 5,\n                        sorted: [{\n                          id: 'id'\n                        }]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 429,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 49\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this), this.state.clickedData.ruleId !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nmlzrule-detail-area\",\n              children: /*#__PURE__*/_jsxDEV(FormProvider, {\n                form: \"ruleArrange\",\n                onSubmit: this.handleSubmit2,\n                onSubmitSuccess: e => {\n                  this.setState({\n                    editArrange: false\n                  });\n                  this.props.reset(\"ruleArrange\");\n                },\n                initialValues: this.state.editing // enableReinitialize\n                ,\n                children: formProps => {\n                  const {\n                    handleSubmit\n                  } = formProps;\n                  return /*#__PURE__*/_jsxDEV(\"form\", {\n                    onSubmit: handleSubmit(this.handleSubmit2),\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"btns\",\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn\",\n                        onClick: e => {\n                          e.preventDefault();\n                          this.handleArrangeCancel();\n                        },\n                        children: \"Cancel\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 467,\n                        columnNumber: 53\n                      }, this), this.state.editArrange && /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn\",\n                        type: \"submit\",\n                        children: \"Save\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 471,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 463,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"sub-stit\",\n                        children: \"Sample log\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 479,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                        className: \"nmlz-rule-textarea\",\n                        value: this.state.clickedData.sample,\n                        onChange: e => {\n                          const {\n                            value\n                          } = e.target;\n                          this.setState(state => {\n                            return { ...state,\n                              clickedData: { ...this.state.clickedData,\n                                sample: value\n                              }\n                            };\n                          });\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 480,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group pdr15\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"sub-stit\",\n                        children: \" Tokenize rule \"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 496,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                        className: \"nmlz-rule-textarea\",\n                        value: this.state.clickedData.rule,\n                        onChange: e => {\n                          const {\n                            value\n                          } = e.target;\n                          this.setState(state => {\n                            return { ...state,\n                              clickedData: { ...this.state.clickedData,\n                                rule: value\n                              }\n                            };\n                          });\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 497,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 495,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        textAlign: \"center\",\n                        height: \"60px\",\n                        padding: \"10px 0\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn nmlz-parse-btn\",\n                        type: \"button\",\n                        onClick: () => this.callParser(),\n                        children: \"Try parse\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 517,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 512,\n                      columnNumber: 50\n                    }, this), /*#__PURE__*/_jsxDEV(Table, {\n                      columns: [{\n                        Header: \"Key\",\n                        accessor: \"data.key\"\n                      }, {\n                        Header: \"Value\",\n                        accessor: \"data.value\"\n                      }, {\n                        Header: \"Fields\",\n                        accessor: \"data.field\",\n                        ...this.editableAllColumnProps\n                      }, {\n                        Header: \"Default\",\n                        accessor: \"data.def\",\n                        ...this.editableAllColumnProps\n                      }, {\n                        Header: \"Extractor\",\n                        accessor: \"data.ext\",\n                        ...this.editableAllColumnProps\n                      }],\n                      data: this.state.clickedData.arrange.slice().map((item, index) => {\n                        const ob = {};\n                        ob[\"idx\"] = index;\n                        ob[\"data\"] = item;\n                        return ob;\n                      }),\n                      defaultPageSize: 5\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 525,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 45\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  originalData: state.fetchAPI.data,\n  data: state.SlidePop.clickedData,\n  refre: state.fetchAPI.refre\n}), dispatch => {\n  return bindActionCreators({\n    addTmp: addTmp,\n    revRe: revRe,\n    delTmp: deleteTmp,\n    clickedOp: clickedOpt,\n    reset: reset\n  }, dispatch);\n})(NormalizeRuleDetailTable);","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/pages/NormalizeRule/NormalizeRuleDetailTable.js"],"names":["React","useState","useRef","useEffect","apiProvider","makeStyles","connect","useDispatch","useSelector","revAd","revRe","revOp","clickedOp","currType","getAllR","openSelectPop","openSelectKeyFieldPop","openSelectConFieldPop","openSavePop","clearClicked","addTmp","deleteTmp","keyFieldSelect","openPop","currEd","hisFlag","addedField","selectHead","clickedOpt","ReleasePopup","GridTable","SelectFieldPopup","SelectKeyFieldPopup","GridTableLDR","SavePopup","GridTableH","SlideTmp","GridTableNormal","SlidingPane","FormProvider","Table","SelectConfirmsPopup","ActionsCell","bindActionCreators","GridFilters","change","Field","reset","HighlightCell","NormalizeRuleDetailTable","Component","state","refre","editing","selected","selectAll","adding","columns","selectEdit","forsubmit","clickedData","ruleId","sample","rule","arrange","editArrange","vendorList","typeList","formatList","resetColumns","setState","id","accessor","Cell","original","toggleRow","Header","x","input","indeterminate","toggleSelectAll","sortable","width","editableColumnProps","maxWidth","filterable","getProps","getActionProps","editableComponent","value","rest","result","Object","keys","reduce","prev","current","toLowerCase","children","undefined","props","fieldProps","component","column","editableAllColumnProps","n","idx","toString","componentDidUpdate","prevProps","t","cond","newRules","data","rules","slice","map","other","assign","final","test","originalData","filter","item","shift","getRow","then","gridState","rowProps","mode","actions","onEdit","onCancel","delTmp","Math","max","v","handleClick","row","handleSave","venString","it","vendor","join","d","vendors","newData","handleArrangeCancel","rollBack","console","log","handleAddVendor","tp","type","format","confirm","priority","newCD","handleSubmit","values","handleSubmit2","index","handleDelete","i","indexOf","makeParserParams","classifier","toParse","prefix","raw","r_type","tokenRule","JSON","stringify","replace","callParser","params","str","parse","parseNew","parsed","parsedData","componentDidMount","newSelected","forEach","render","formProps","rowInfo","onClick","e","preventDefault","target","textAlign","height","padding","ob","fetchAPI","SlidePop","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport {apiProvider} from \"../../services/Provider\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {connect, useDispatch, useSelector} from \"react-redux\";\nimport \"../../components/table/style.scss\"\nimport {\n    revAd,\n    revRe,\n    revOp,\n    clickedOp,\n    currType,\n    getAllR,\n    openSelectPop,\n    openSelectKeyFieldPop,\n    openSelectConFieldPop,\n    openSavePop,\n    clearClicked,\n    addTmp,\n    deleteTmp,\n    keyFieldSelect,\n    openPop,\n    currEd, hisFlag, addedField, selectHead, clickedOpt\n} from \"../../services/Redux/actions\";\nimport ReleasePopup from \"../../components/popup/ReleasePopup\";\nimport GridTable from \"../../components/table/gridTable\";\n// import \"react-table/react-table.css\";\nimport SelectFieldPopup from \"../../components/popup/SelectFieldPopup\";\nimport SelectKeyFieldPopup from \"../../components/popup/SelectKeyFieldPopup\";\nimport GridTableLDR from \"../../components/table/gridTableLDR\";\nimport SavePopup from \"../../components/popup/SavePopup\";\nimport GridTableH from \"../../components/table/gridTableH\";\nimport SlideTmp from \"../Asset/AssetSlide\";\nimport GridTableNormal from \"../../components/table/gridTableNormal\";\nimport SlidingPane from \"react-sliding-pane\";\nimport FormProvider from \"../../components/table/FormProvider\";\nimport Table from \"react-table\";\nimport SelectConfirmsPopup from \"../../components/popup/SelectConfirmsPopup\";\nimport ActionsCell from \"../../components/table/ActionsCell\";\nimport {bindActionCreators} from \"redux\";\nimport GridFilters from \"../../components/table/GridFilters\";\nimport {change, Field, reset} from \"redux-form\";\nimport HighlightCell from \"../../components/table/HighlightCell\";\n\n\nclass NormalizeRuleDetailTable extends React.Component {\n\n    //TODO::add 하고 취소하기가.. 그리고 여기 refresh 안되어있다.\n    state = {\n        refre : false,\n        editing: false,\n        selected: {},\n        selectAll: 0,\n        adding: false,\n        columns:[],\n        selectEdit: false,\n        forsubmit: false,\n        clickedData: {\n            ruleId: \"\",\n            sample: \"\",\n            rule: \"\",\n            arrange: []\n        },\n        // clickedRule: {},\n        editArrange: false\n    }\n\n    //TODO:: arrange rule도 select list로 바꾸기\n    vendorList = []\n    typeList = []\n    formatList = [] //confirm 과 priority 는 text 입력\n\n    resetColumns =()=>{\n        this.setState((state)=>{\n            return {\n                ...state, columns:\n\n                    [\n                        {\n                            columns: [\n                                {\n                                    id: \"checkbox\",\n                                    accessor: \"\",\n                                    Cell: ({original}) => {\n                                        return (\n                                            <input\n                                                type=\"checkbox\"\n                                                className=\"checkbox\"\n                                                checked={this.state.selected[original.ruleId] === true}\n                                                onChange={() => this.toggleRow(original.ruleId)}\n                                            />\n                                        );\n                                    },\n                                    Header: x => {\n                                        return (\n                                            <input\n                                                type=\"checkbox\"\n                                                className=\"checkbox\"\n                                                checked={this.state.selectAll === 1}\n                                                ref={input => {\n                                                    if (input) {\n                                                        input.indeterminate = this.state.selectAll === 2;\n                                                    }\n                                                }}\n                                                onChange={() => this.toggleSelectAll()}\n                                            />\n                                        );\n                                    },\n                                    sortable: false,\n                                    width: 45\n                                },\n                            ]\n                        },\n                        {Header: \"RuleId\", accessor: \"ruleId\", ...this.editableColumnProps},\n                        {Header: \"Vendor\", accessor: \"vendor\", ...this.editableColumnProps},\n                        {Header: \"Type\", accessor: \"type\", ...this.editableColumnProps},\n                        {Header: \"Log Format\", accessor: \"format\", ...this.editableColumnProps},\n                        {Header: \"Confirm\", accessor: \"confirm\", ...this.editableColumnProps},\n                        {Header: \"Priority\", accessor: \"priority\", ...this.editableColumnProps},\n                        {\n                            Header: \"\",\n                            maxWidth: 90,\n                            filterable: false,\n                            getProps: this.getActionProps,\n                            Cell: ActionsCell\n                        }\n                    ]\n            }\n        })\n    }\n    editableComponent = ({input, editing, value, ...rest}) => {\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'input' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n    editableColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n\n            const editing = this.state.editing === props.original;\n            const fieldProps = {\n                component: this.editableComponent,\n                editing,\n                props\n            };\n            return <Field name={props.column.id} {...fieldProps} />;\n\n        }\n    };\n\n\n    editableAllColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n            const editing = this.state.editArrange\n            const fieldProps = {\n                component: this.editableComponent,\n                editing,\n                props\n            };\n\n            const n = props.original.idx + \",\" + props.column.id\n            return <Field name={n.toString()} value=\"\" {...fieldProps} />;\n\n        }\n    };\n    componentDidMount() {\n        this.resetColumns()\n    }\n\n    componentDidUpdate = (prevProps) => {\n        //for arrangeRule submit\n        const t = ((prevProps.forsubmit !== this.state.forsubmit))\n        const cond = (prevProps.refre !== this.state.refre)\n        if(t && this.state.forsubmit){\n            const newRules = this.props.data.rules.slice().map(({ruleId, sample, rule, arrange, ...other}) => {\n                return (ruleId == this.state.clickedData.ruleId) ? Object.assign({}, this.state.clickedData, other)\n                    : Object.assign({}, {ruleId:ruleId, sample:sample,rule:rule, arrange:arrange}, other)\n            })\n            let final = this.props.data\n            final.rules = newRules\n            this.props.clickedOp(final)\n            this.setState({forsubmit:false})\n        }\n        if(cond && this.state.refre) { //TODO:: original data rollBack\n            //db에 있었던 경우 && 없는경우\n            const test = this.props.originalData.slice().filter(item=>item.id==this.props.data.id).shift() //originalData <-> store.data\n            apiProvider.getRow(\"normalizerule\", this.props.data.id).then((data)=>\n                data !== undefined ? this.props.clickedOp(data) : this.props.clickedOp(test))\n\n            this.setState({refre:false, selected:{}})\n\n\n\n        }\n\n    }\n    getActionProps = (gridState, rowProps) =>\n        (rowProps && {\n            mode: this.state.editing === rowProps.original ? (this.state.adding ? \"add\" : \"edit\") : \"view\",\n\n            actions: {\n                onEdit: () => {\n                    !this.state.adding && this.setState({editing: rowProps.original, adding: false})\n                },\n                onCancel: () => {\n                    this.setState({editing: null, adding: false});\n                    this.state.adding && this.props.delTmp(\n                        Math.max(0, ...this.props.data.rules.slice().map(v => v.ruleId))\n                    )\n                }\n            }\n        }) ||\n        {};\n\n    toggleRow(id) {\n        const newSelected = Object.assign({}, this.state.selected);\n        newSelected[id] = !this.state.selected[id];\n        this.setState({\n            selected: newSelected,\n            selectAll: 2\n        });\n    }\n\n    toggleSelectAll() {\n        let newSelected = {};\n        if (this.state.selectAll === 0) {\n            this.props.data.rules.forEach(x => {\n                newSelected[x.ruleId] = true;\n            });\n        }\n\n        this.setState({\n            selected: newSelected,\n            selectAll: this.state.selectAll === 0 ? 1 : 0\n        });\n    }\n\n    //TODO::highlight가 있었으면 좋겠어\n    handleClick = (row) => {\n        this.setState({\n            clickedData: {\n                ruleId: row[\"ruleId\"],\n                sample: row[\"sample\"],\n                rule: row[\"rule\"],\n                arrange: row[\"arrange\"]\n            }\n        })\n    }\n    handleSave = () => {\n        const venString = this.props.data.rules.slice().map(it=>it.vendor).join(',')\n        const d = this.props.data\n        d.vendors = venString\n        const newData = this.props.originalData.slice().map((item) => {\n            return (item.id === d.id) ? d : item\n        })\n        this.props.addTmp(newData)\n    }\n\n    //TODO:: edit 누르기 전까진 sample log, tokenize rule 수정 불가능 해야함.\n    handleArrangeCancel = () => {\n        this.props.reset(\"ruleArrange\")\n        this.setState({editArrange:false})\n        const rollBack = this.props.data.rules.slice().filter(it=>it.ruleId===this.state.clickedData.ruleId).shift()\n        console.log(rollBack)\n        this.setState({\n            clickedData: {\n                ruleId: rollBack[\"ruleId\"],\n                sample: rollBack[\"sample\"],\n                rule: rollBack[\"rule\"],\n                arrange: rollBack[\"arrange\"]\n            }\n        })\n    }\n\n    handleAddVendor = () => {\n        const tp = {\n            ruleId: \"\",\n            vendor: \"\",\n            type: \"\",\n            format: \"\",\n            confirm: \"\",\n            priority: \"\",\n            sample: \"\",\n            rule: \"\",\n            arrange: []\n        }\n\n        tp.ruleId = (Math.max(0, ...this.props.data.rules.slice().map(v => v.ruleId)) + 1).toString()\n        this.setState({...this.state, editing: tp, adding: true})\n        const newCD = {...this.props.data} //TODO::진짜 쉿이다. props.data가 변하고 이게 변하니까 props.original.data가 변했구나..\n        newCD.rules = [tp, ...newCD.rules]\n        this.props.clickedOp(newCD)\n    }\n\n    handleSubmit = (values) => {\n        this.setState((state)=>{\n            const newCD = {...this.props.data} //TODO::지지\n            newCD.rules = newCD.rules.map((item)=>{\n                return item.ruleId === values.ruleId? values: item\n                }\n            )\n            this.props.clickedOp(newCD)\n            return state.adding ? {...state, adding:false} : {...state}\n        })\n    }\n\n    handleSubmit2 = (values) => {\n        console.log(values)\n        this.setState((state)=>{\n\n            return {...state, forsubmit:true, clickedData:{\n                ...state.clickedData,\n                    arrange: Object.values(values).map((item, index)=>{\n                        return Object.assign({}, item, this.state.clickedData.arrange[index])\n                    })\n                }}\n        })\n    }\n\n    handleDelete = () => {\n        const n = (({rules, ...other})=>{\n            return {rules:rules.filter((i)=>Object.keys(this.state.selected).indexOf(i.ruleId) < 0), ...other}\n        })({...this.props.data})\n        console.log(n)\n\n        this.props.clickedOp(n)\n    }\n\n    ///efore parse\n    makeParserParams = () => {\n\n        const {classifier} = this.props.data\n        const {confirm, format} = this.props.data.rules.slice().filter(item=>\n            item.ruleId === this.state.clickedData.ruleId\n        ).shift()\n        const {sample, rule} = this.state.clickedData\n\n        const toParse = {\n            confirm: confirm,\n            prefix: classifier, //classifier in props.data\n            raw:sample,\n            r_type:format,\n            tokenRule: rule\n        }\n\n        return JSON.stringify(toParse)\n            .replace(/\\\\n/g, \"\\\\n\")\n            .replace(/\\\\'/g, \"\\\\'\")\n            .replace(/\\\\\"/g, '\\\\\"')\n            .replace(/\\\\&/g, \"\\\\&\")\n            .replace(/\\\\r/g, \"\\\\r\")\n            .replace(/\\\\t/g, \"\\\\t\")\n            .replace(/\\\\b/g, \"\\\\b\")\n            .replace(/\\\\f/g, \"\\\\f\");\n    }\n\n    //TODO:: parser header fail???\n    callParser = async () => {\n\n        const params = this.makeParserParams();\n        const str =\n            \"{\\\"confirm\\\":\\\"SAPModeNumber=*+>SAPEventSequence=*\\\",\\\"prefix\\\":\\\"*\\\\\\\"SAPRcvID\\\\\\\":-1015614763\\\\\\\"*\\\",\\\"raw\\\":\\\"{\\\\\\\"UserID\\\\\\\":\\\\\\\"미등록IP\\\\\\\",\\\\\\\"EmpName\\\\\\\":\\\\\\\"미등록IP\\\\\\\",\\\\\\\"DeptName\\\\\\\":\\\\\\\"회사\\\\\\\",\\\\\\\"SAPRcvID\\\\\\\":-1015614763,\\\\\\\"SAPRowNumber\\\\\\\":2143402056,\\\\\\\"SAPModeNumber\\\\\\\":3,\\\\\\\"SAPEventSequence\\\\\\\":2411,\\\\\\\"SAPTimeReceived\\\\\\\":1604448001000,\\\\\\\"SAPTimeRequest\\\\\\\":null,\\\\\\\"SAPTimeResponse\\\\\\\":null,\\\\\\\"SAPAccTimeReceived\\\\\\\":null,\\\\\\\"SAPAccTimeRequest\\\\\\\":null,\\\\\\\"SAPAccTimeResponse\\\\\\\":null,\\\\\\\"SAPDataType\\\\\\\":0,\\\\\\\"SAPOKCode\\\\\\\":null,\\\\\\\"SAPTransactionCode\\\\\\\":\\\\\\\"FB03\\\\\\\",\\\\\\\"SAPFuncName\\\\\\\":null,\\\\\\\"SAPDynproName\\\\\\\":\\\\\\\"SAPMF05L\\\\\\\",\\\\\\\"SAPTitleMain\\\\\\\":\\\\\\\"Display Document: Data Entry View\\\\\\\",\\\\\\\"SAPMessage\\\\\\\":\\\\\\\"Invoice document 5105671034 has been posted\\\\\\\",\\\\\\\"SAPPacketSize\\\\\\\":3588,\\\\\\\"SAPAlert\\\\\\\":0,\\\\\\\"SAPSessionGUID\\\\\\\":\\\\\\\"2AC41BC7-9CDB-472C-B2FF-2E4AE66ACFC5\\\\\\\",\\\\\\\"SAPLogType\\\\\\\":0,\\\\\\\"PolicyName\\\\\\\":null,\\\\\\\"PolicyRuleDesc\\\\\\\":null,\\\\\\\"DecideRequestTime\\\\\\\":null,\\\\\\\"DecideResponseTime\\\\\\\":null,\\\\\\\"DecideResponseType\\\\\\\":null,\\\\\\\"DecideOfficerUID\\\\\\\":null,\\\\\\\"AlertPolicyName\\\\\\\":null,\\\\\\\"AlertPolicyRuleDesc\\\\\\\":null,\\\\\\\"AbnormalDataDesc\\\\\\\":null,\\\\\\\"IsCaptured\\\\\\\":0,\\\\\\\"SAPClientIP\\\\\\\":\\\\\\\"10.88.7.210\\\\\\\",\\\\\\\"SAPClientPort\\\\\\\":60958,\\\\\\\"SAPServerIP\\\\\\\":\\\\\\\"168.154.28.74\\\\\\\",\\\\\\\"SAPServerPort\\\\\\\":3200,\\\\\\\"SAPSessTimeReceived\\\\\\\":1604448001000,\\\\\\\"SAPSessTimeLogin\\\\\\\":1604448000000,\\\\\\\"SAPSessAccTimeReceived\\\\\\\":1604448001150,\\\\\\\"SAPSessAccTimeLogin\\\\\\\":1604448000168,\\\\\\\"SAPUserID\\\\\\\":\\\\\\\"PE00024\\\\\\\",\\\\\\\"SAPClient\\\\\\\":\\\\\\\"900\\\\\\\",\\\\\\\"SAPUID\\\\\\\":\\\\\\\"uBBF8uB4F1uB85DIP\\\\\\\",\\\\\\\"SAPSessType\\\\\\\":24,\\\\\\\"eventId\\\\\\\":\\\\\\\"e2a11be9-6ff2-cbeb-30c3-1ffa1b75f173\\\\\\\"}\\\",\\\"r_type\\\":\\\"json\\\",\\\"tokenRule\\\":\\\"SAPTimeRequest\\\\tSAPTimeReceived\\\\tSAPSessTimeLogin\\\\tSAPClientIP\\\\tSAPClientPort\\\\tSAPServerIP\\\\tSAPServerPort\\\\tSAPTitleMain\\\\tSAPMessage\\\\tSAPPacketSize\\\\tAbnormalDataDesc\\\\tSAPUserID\\\\tEmpName\\\\tDeptName\\\\tAlertPolicyName\\\"}\"\n\n        apiProvider.parse(str).then((data)=>this.parseNew(data.parsed))\n    }\n\n    //after parse it\n    parseNew = (parsedData) => {\n        // const resultData = [{\"key\":\"SAPClientPort\",\"value\":\"60958\"},{\"key\":\"SAPTitleMain\",\"value\":\"Display Document: Data Entry View\"}]\n\n        this.setState((state)=>{\n            return {...state, editArrange: true, clickedData:{\n                    ...this.state.clickedData,\n                    arrange: parsedData\n                }}\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"normalization-rule\">\n                    <div className=\"rule-result\">\n\n                        <div className=\"nmlzrule-table-wrapper\">\n                            <div className=\"header-bar\">\n                                <span className=\"header__title\"> Live Detect Rule </span>\n                                <div className=\"binder\"/>\n                            </div>\n\n\n                            <div className=\"btns\">\n                                <button className=\"btn\" type=\"button\" onClick={this.handleAddVendor}>\n                                    Add\n                                </button>\n                                <button className=\"btn\" onClick={this.handleDelete}>\n                                    Delete\n                                </button>\n                                <button className=\"btn\" onClick={()=>this.setState({refre:true})}>\n                                    Refresh\n                                </button>\n\n                                <div className=\"seperate-bar-100\"/>\n\n                                <button className=\"btn\" onClick={this.handleSave}>\n                                    Save\n                                </button>\n\n                            </div>\n                            <div className=\"table-wrapper\">\n                                <div className=\"Fixed\">\n\n                                    <FormProvider\n                                        form=\"rules\"\n                                        onSubmit={this.handleSubmit}\n                                        onSubmitSuccess={() => {this.setState({editing: null})}}\n                                        initialValues={this.state.editing}\n                                        enableReinitialize\n                                    >\n                                        {(formProps) => {\n                                            return (\n                                                <form onSubmit={formProps.handleSubmit}>\n                                                    <Table\n                                                        getTdProps={(state, rowInfo, column) => ({\n                                                            onClick: () => (rowInfo !== undefined && !this.state.editing) ? this.handleClick(rowInfo.original) : undefined\n                                                        })}\n                                                        columns={this.state.columns}\n                                                        data={this.props.data.rules}\n                                                        pageSizeOptions={[5, 10, 500, 1000]}\n                                                        defaultPageSize={5}\n                                                        sorted={[{id: 'id'}]}\n                                                    />\n                                                </form>\n                                            );\n                                        }}\n                                    </FormProvider>\n                                </div>\n                            </div>\n\n                            {this.state.clickedData.ruleId !== \"\" && (\n\n                            <div className=\"nmlzrule-detail-area\">\n\n                                <FormProvider\n                                    form=\"ruleArrange\"\n                                    onSubmit={this.handleSubmit2}\n                                    onSubmitSuccess={(e) => {this.setState({editArrange: false}); this.props.reset(\"ruleArrange\")}}\n                                    initialValues={this.state.editing}\n                                    // enableReinitialize\n                                >\n                                    {(formProps) => {\n                                        const {handleSubmit} = formProps\n                                        return (\n\n                                            <form onSubmit={handleSubmit(this.handleSubmit2)}>\n\n                                                <div className=\"btns\">\n                                                    {/*<button className=\"btn\" onClick={(e)=>{e.preventDefault(); this.parseNew()}}>*/}\n                                                    {/*    Edit*/}\n                                                    {/*</button>*/}\n                                                    <button className=\"btn\" onClick={(e)=>{e.preventDefault(); this.handleArrangeCancel()}}>\n                                                        Cancel\n                                                    </button>\n                                                    { this.state.editArrange &&\n                                                        <button className=\"btn\" type=\"submit\">\n                                                        Save\n                                                    </button>}\n\n                                                </div>\n\n\n                                                <div className=\"form-group\">\n                                                    <span className=\"sub-stit\">Sample log</span>\n                                                    <textarea\n                                                        className=\"nmlz-rule-textarea\"\n                                                        value={this.state.clickedData.sample}\n                                                        onChange={e=>{\n                                                            const {value} = e.target;\n                                                            this.setState((state)=>{\n                                                                return {...state, clickedData: {\n                                                                        ...this.state.clickedData,\n                                                                        sample: value\n                                                                    }}\n                                                            })\n                                                        }}\n\n                                                    />\n                                                </div>\n                                                <div className=\"form-group pdr15\">\n                                                    <span className=\"sub-stit\"> Tokenize rule </span>\n                                                    <textarea\n                                                        className=\"nmlz-rule-textarea\"\n                                                        value={this.state.clickedData.rule}\n                                                        onChange={e=>{\n                                                            const {value} = e.target;\n                                                            this.setState((state)=>{\n                                                                return {...state, clickedData: {\n                                                                        ...this.state.clickedData,\n                                                                        rule: value\n                                                                    }}\n                                                            })\n                                                        }}\n                                                    />\n                                                </div>\n\n                                                {<div style={{\n                                                    textAlign: \"center\",\n                                                    height: \"60px\",\n                                                    padding: \"10px 0\",\n                                                }}>\n                                                    <button\n                                                        className=\"btn nmlz-parse-btn\"\n                                                        type=\"button\"\n                                                        onClick={()=>this.callParser()}\n                                                    >Try parse\n                                                    </button>\n                                                </div>}\n\n                                                <Table\n                                                    columns={[\n                                                        {Header: \"Key\", accessor: \"data.key\"},\n                                                        {Header: \"Value\", accessor: \"data.value\"},\n                                                        {Header: \"Fields\", accessor: \"data.field\", ...this.editableAllColumnProps},\n                                                        {Header: \"Default\", accessor: \"data.def\", ...this.editableAllColumnProps},\n                                                        {Header: \"Extractor\", accessor: \"data.ext\", ...this.editableAllColumnProps},\n                                                    ]}\n                                                    data={this.state.clickedData.arrange.slice().map((item, index)=>{\n                                                        const ob = {}\n                                                        ob[\"idx\"] = index\n                                                        ob[\"data\"] = item\n                                                        return ob\n                                                    })}\n                                                    defaultPageSize={5}\n\n                                                />\n\n\n                                            </form>\n                                        )\n                                    }}\n                                </FormProvider>\n                            </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n}\nexport default connect(\n    state => ({\n        originalData: state.fetchAPI.data,\n        data: state.SlidePop.clickedData,\n\n        refre: state.fetchAPI.refre,\n    }),\n    dispatch => {\n        return bindActionCreators(\n            {\n                addTmp: addTmp,\n                revRe: revRe,\n                delTmp: deleteTmp,\n                clickedOp: clickedOpt,\n                reset : reset\n            },\n            dispatch\n        )\n    }\n)(NormalizeRuleDetailTable)"]},"metadata":{},"sourceType":"module"}