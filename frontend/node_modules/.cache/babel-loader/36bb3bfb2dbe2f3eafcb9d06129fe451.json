{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableLDR.js\";\nimport React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\n\nimport { Field } from \"redux-form\"; // import Table from \"react-table\";\n\nimport Table from \"react-table\";\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport { avatarColumnProps } from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport { useSelector } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport { addedField, addSave, currEd, dataSave, deleteTmp, delSave, editSave, editZero, getAllR, hisFlag, keyFieldSelect, openSelectKeyFieldPop, restoreHead, restoreVersion, saveVersion, selectHead, startHis } from \"../../services/Redux/actions\";\nimport { bindActionCreators } from 'redux';\nimport { addTmp, revRe, openPop } from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport { apiProvider } from \"../../services/Provider\";\nimport \"./style.scss\";\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GridTableLDR extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: null,\n      selected: {},\n      selectAll: 0,\n      adding: false,\n      columns: [],\n      selectEdit: false,\n      willRemoved: [],\n      temps: false,\n      pages: null,\n      pagesH: null,\n      loading: true,\n      sorted: [],\n      totalRows: 0,\n      tableProps: {}\n    };\n    this.selectList = {\n      typeList: [\"String\", \"Numeric\", \"IP\"],\n      groupList: [\"Required\", \"Additional\"]\n    };\n\n    this.getSelect = (type, curr) => {\n      const v = this.selectList[type].filter(i => i !== curr);\n      return v;\n    };\n\n    this.resetColumn = () => {\n      this.setState(state => {\n        return { ...state,\n          columns: [{\n            columns: [{\n              id: \"checkbox\",\n              accessor: \"\",\n              Cell: ({\n                original\n              }) => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selected[original.id] === true,\n                  onChange: () => this.toggleRow(original.id),\n                  disabled: this.props.delId.indexOf(original.id) !== -1 //있으면\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 41\n                }, this);\n              },\n              Header: x => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selectAll === 1,\n                  ref: input => {\n                    if (input) {\n                      input.indeterminate = this.state.selectAll === 2;\n                    }\n                  },\n                  onChange: () => this.toggleSelectAll()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 41\n                }, this);\n              },\n              sortable: false,\n              width: 45\n            }]\n          }].concat(this.props.columns.slice().map(item => {\n            return { ...item,\n              ...this.editableColumnProps\n            };\n          })).concat({\n            Header: \"\",\n            maxWidth: 90,\n            filterable: false,\n            getProps: this.getActionProps,\n            Cell: ActionsCell\n          })\n        };\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      const restore = prevProps.edited !== this.props.edited;\n      const ver = prevProps.version !== this.props.version;\n      const resHead = prevProps.headRestore !== this.props.headRestore;\n      const cond = prevProps.refre !== this.props.refre;\n      const nField = prevProps.newField !== this.props.newField;\n      const col = prevProps.header !== this.props.header;\n\n      if (cond && this.props.refre && this.props.edited == 0) {\n        this.setState({\n          editing: null\n        });\n        this.adjustColumn(true);\n        this.props.dataSave([]);\n      }\n\n      if (this.props.edited !== 0 && restore) {\n        this.adjustColumn(false);\n      }\n\n      if (col) {\n        this.resetColumn();\n      }\n\n      if (cond) {\n        this.props.handleHeadVer(this.props.version);\n        this.resetColumn(); // this.props.handleData()\n\n        console.log(\"hi\");\n        console.log(this.props.data);\n      }\n\n      if (resHead && this.props.headRestore) {\n        console.log(this.props.data[0].ver);\n        this.props.restoreVer(this.props.data[0].ver);\n        this.props.handleHeadVer(this.props.data[0].ver);\n        this.props.resHead(false);\n      }\n\n      if (nField) {\n        const nCol = this.state.columns;\n        nCol.splice(-1, 0, {\n          Header: this.props.newField,\n          accessor: this.props.newField,\n          ...this.editableColumnProps\n        });\n        this.setState(state => {\n          return { ...state,\n            columns: nCol\n          };\n        });\n      }\n\n      if (ver) {\n        this.handleSaveNewVer();\n      }\n    };\n\n    this.selectableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'select' : 'p';\n\n      const children = //여기 value 에 직접 넣을 수 있으면 좋을텐데.\n      !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 26\n      }, this) || /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), this.getSelect(\"typeList\", value).map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 72\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.editableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {}); //input안에 name있음 이거 가지고 action넣으면 되지 않을까\n\n      const Component = editing ? 'input' : 'p';\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 26\n      }, this) || undefined;\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.isSelectField = col => [\"type\", \"group\"].indexOf(col) !== -1;\n\n    this.editableColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n          editing,\n          props\n        };\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: props.column.id,\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.handleCellClick = data => {// this.props.handleRow(data)\n    };\n\n    this.getActionProps = (gridState, rowProps) => rowProps && {\n      mode: this.state.editing === rowProps.original ? this.state.adding ? \"add\" : \"edit\" : \"view\",\n      actions: {\n        onEdit: () => {\n          !this.state.adding && this.setState({\n            editing: rowProps.original,\n            adding: false\n          });\n        },\n        onCancel: () => {\n          this.setState({\n            editing: null,\n            adding: false\n          });\n          this.state.adding && this.props.delTmp(this.props.data.length);\n        }\n      }\n    } || {};\n\n    this.handleSubmit = values => {\n      // (this.props.addId.indexOf(values.id) == -1) && this.props.editSave([values.id, ...this.props.editId]) //TODO::edit id에 이미 있는 id가 들어오면? 한번 수정한거나\n      // this.props.dataSave([values, ...this.props.savedData]) //여기서 add/edit하다가 cancel한 애들은 지워주면 됨.\n      //add하고 지운거, add하다가 cancel한거(submit을 안했겠지)\n      if (this.props.addId.indexOf(values.id) != -1) {\n        //add하고 edit하면 어떡하지\n        const editAfterAdd = this.props.savedData.map(item => {\n          return item.id == values.id ? values : item;\n        });\n        this.props.dataSave([values, ...editAfterAdd]);\n      } else if (this.props.editSave.indexOf(values.id) != -1) {\n        //바꿔치기\n        this.props.dataSave(this.props.savedData.map(item => {\n          return item.id == values.id ? values : item;\n        }));\n      } else {\n        this.props.editSave([values.id, ...this.props.editId]);\n        this.props.dataSave([values, ...this.props.savedData]);\n      }\n\n      console.log(\"why not cancel?\"); //TODO::cancel이 일로가는구나 버튼이 작아서 잘리네 잘 눌러야함..\n\n      this.setState(state => {\n        this.props.addTmp(this.props.data.map(item => {\n          return item.id === values.id ? values : item;\n        }));\n        return state.adding ? { ...state,\n          adding: false\n        } : { ...state\n        };\n      });\n    };\n\n    this.adjustColumn = flag => {\n      const last = this.state.columns[this.state.columns.length - 1];\n      const tmp = this.state.columns.slice().splice(0, this.state.columns.length - 1);\n      last.show = flag;\n      this.setState({\n        columns: [...tmp, last]\n      });\n    };\n\n    this.handleConFieldSelect = ob => {\n      this.props.setKfOb(ob); //TODO::\n\n      this.props.openConSelectPopup();\n    };\n\n    this.handleKeyFieldSelect = ob => {\n      console.log(ob);\n      this.props.setKfOb(ob);\n      this.props.openKeySelectPopup();\n    };\n\n    this.handleFieldAdd = () => {\n      this.props.openSelectPopup();\n    };\n\n    this.handleGridData = async version => {\n      const tmp = this.props.savedData.filter(it => this.props.delId.indexOf(it.id) == -1) //add했다가 cancel한 애 제외\n      .map(item => {\n        const con = [];\n\n        const res = (({\n          id,\n          active,\n          ruletype,\n          keyfield,\n          confirms,\n          ver,\n          updatedat,\n          ...other\n        }) => {\n          Object.keys(other).filter(it => other[it] !== \"\").forEach(it => {\n            con.push({\n              field: it,\n              value: other[it]\n            });\n          });\n          return {\n            id,\n            active,\n            ruletype,\n            keyfield,\n            confirms,\n            ver: version\n          };\n        })(item);\n\n        res['conditions'] = con;\n        console.log(res);\n        return res;\n      }); //TODO:: edited!==0 일때는 restore용 api를 따로 불러야함. + edited == 0 만들고 + 여기서 restore 도 아니고 saveData 없을때는 아무것도 안함.\n\n      if (this.props.edited != 0) {\n        apiProvider.restore(tmp, \"false\").then(() => {\n          this.props.revRe(true);\n          this.props.editZero();\n        });\n        this.adjustColumn(true);\n      } else {\n        this.state.willRemoved.length && this.state.willRemoved.forEach(id => {\n          apiProvider.delNormal(\"rules\", parseInt(id)).then(() => this.setState({\n            willRemoved: []\n          }));\n        }); //upsert 로직 추가\n        //this.props.saveData --> edit, add 내역\n\n        console.log(this.props.savedData);\n        apiProvider.upsertAndHistory(\"false\", tmp).then(() => {\n          this.props.dataSave([]);\n          this.props.revRe(true);\n        });\n      } //--\n      // apiProvider.delAll('rules').then(\n      //     await Promise.all(this.props.data.map((item) => { //사실 여기서 버전을 제외하고는 업데이트가 되어 있을 것.\n      //         this.props.addf(item, version)\n      //     }))\n      // )\n      // const history = {\n      //     id: \"1\",\n      //     desc: \"temp\",\n      //     user: \"admin\",\n      //     released: \"false\",\n      //     value: {\n      //         field: this.props.data.map(({ver, ...other}) => {\n      //             return Object.assign({}, other, {ver: version})\n      //         })\n      //     }\n      // }\n      // apiProvider.insert('history/livedetectrule', history).then(() => {\n      //     this.props.hisFlag(true)\n      // })\n\n    };\n\n    this.handleSaveNewVer = () => {\n      console.log(this.props.version);\n      const temp = this.state.columns.slice();\n      temp.splice(0, 1);\n      temp.splice(-1, 1);\n      console.log(temp.map(({\n        Header\n      }) => Header));\n      const header = {\n        ver: this.props.version,\n        type: \"live\",\n        header: temp.map(({\n          Header\n        }) => Header)\n      }; // apiProvider.insertHead(header).then()\n\n      apiProvider.deActiveHead().then(() => apiProvider.insertHead(header).then(() => this.handleGridData(this.props.version))); // this.props.insertHead(header)\n      // this.handleGridData()\n    };\n\n    this.handleSaveSameVer = version => {\n      // this.props.activeHead(version)\n      apiProvider.deActiveHead().then(apiProvider.activeHead(version).then(() => this.handleGridData(version))); // this.handleGridData()\n    };\n\n    this.handleSave = () => {\n      // const temp = this.state.columns\n      // temp.splice(0, 1)\n      // temp.splice(-1, 1)\n      //밑에 조건 둘 중 무조건 하나만 실행됨. 그래야함..\n      if (this.props.columns.length != this.state.columns.length - 2) this.props.openSave();else if (this.props.versionTmp !== \"\") this.handleSaveSameVer(this.props.versionTmp);else this.handleGridData(this.props.version);\n    };\n\n    this.handleDelete = () => {\n      console.log(Object.keys(this.state.selected));\n      Object.keys(this.state.selected).forEach(i => {\n        this.props.delTmp(i);\n        this.props.delSave([i, ...this.props.delId]);\n      });\n      this.setState(state => {\n        return { ...state,\n          selected: {},\n          willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n        };\n      });\n    };\n\n    this.handleAdd = () => {\n      const addTemp = this.state.columns.slice();\n      addTemp.splice(-1, 1);\n      addTemp.splice(0, 1);\n      const tp = {};\n      addTemp.forEach(({\n        accessor\n      }) => {\n        tp[accessor] = \"\";\n      });\n      tp.id = this.props.data.length + 1;\n      console.log(this.props.data.length);\n      this.setState(state => {\n        return { ...state,\n          editing: tp,\n          adding: true\n        };\n      });\n      console.log(tp);\n      this.props.addTmp([tp, ...this.props.data]);\n      this.props.addSave([tp.id, ...this.props.addId]);\n    };\n\n    this.handleClickPopUp = (columnId, data) => {\n      switch (columnId) {\n        case \"keyfield\":\n          return this.handleKeyFieldSelect(data);\n\n        case \"confirms\":\n          return this.handleConFieldSelect(data);\n\n        default:\n          return;\n      }\n    };\n\n    this.sendWithQuery = (filtered, offset, limit, pageSize) => {\n      const ob = {};\n      filtered.forEach(({\n        id,\n        value\n      }) => {\n        ob[id] = value;\n      });\n      const obj = {\n        offset: offset,\n        limit: limit,\n        filters: ob\n      }; //TODO:: for filtered 이거 async 라 추후 초치 필요할듯\n\n      apiProvider.getFiltersCounts(\"rules\", obj).then(res => this.setState({\n        totalRows: res\n      })); //TODO:: debounce it\n\n      apiProvider.getLiveRulesFilter(obj).then(res => {\n        this.props.setData(res.map(item => {\n          return this.props.editId.indexOf(item.id) && this.props.savedData ? this.props.savedData.map(i => {\n            return i.id == item.id && i;\n          }) : item;\n        }));\n        this.setState({\n          loading: false,\n          pages: Math.ceil(this.state.totalRows / pageSize)\n        });\n      });\n    };\n\n    this.tmp = () => {\n      //add하고 지운거, add하다가 cancel한거(submit을 안했겠지) + savedData 지우는 시점에 나머지도 다 날려.\n      apiProvider.getLiveRules(0, 2).then(res => {\n        const d = res.map(item => {\n          const modiData = this.props.savedData.filter(it => this.props.delId.indexOf(it.id) == -1).filter(data => {\n            if (this.props.editId.indexOf(item.id)) {\n              return data;\n            } else return;\n          });\n          return modiData[0];\n        }); //if 첫페이지면 d에다가 addId 추가 if(state==0)\n\n        d.concat(this.savedData.filter(data => {\n          this.props.addId.indexOf(data.id);\n        }));\n      });\n    };\n\n    this.fetchData = (state, instance) => {\n      apiProvider.getRowCounts(\"rules\").then(res => this.setState({\n        totalRows: res\n      }));\n      this.setState({\n        loading: true\n      });\n      const offset = state.page * state.pageSize;\n      const limit = state.pageSize; // console.log((i.id === item.id) && item)\n\n      console.log(this.props.savedData);\n      console.log(this.props.delId); //TODO:: page 1(가장처음 또는 내가 add 누를때 있던 그 페이지던지) 일때 add 한 내역들 다 보여주게 해야함. + bulkupsert 안됨\n\n      state.filtered.length ? this.sendWithQuery(state.filtered, offset, limit, state.pageSize) : apiProvider.getLiveRules(offset, limit).then(res => {\n        // const tmp = this.props.savedData\n        //     .filter((it) => this.props.delId.indexOf(it.id) == -1) //add했다가 cancel한 애 제외\n        const add = this.props.savedData.filter(it => this.props.delId.indexOf(it.id) == -1).filter(i => this.props.addId.indexOf(i.id) !== -1); //add하고 edit하면 어떢하지\n\n        const tmptmp = res.filter(i => this.props.delId.indexOf(i.id) == -1);\n        console.log(tmptmp);\n        const tmp = res.filter(i => this.props.delId.indexOf(i.id.toString()) == -1) //=>얘를 체크박스로 바꾸면 될거같은데\n        .map(item => {\n          // return ((this.props.editId.indexOf(item.id) !== -1) && this.props.savedData.length) ? this.props.savedData.filter(i => i.id === item.id)[0] : item\n          if (this.props.editId.indexOf(item.id) !== -1) return this.props.savedData.filter(i => i.id === item.id)[0];else return item;\n        }); //+여기서 지울애 지우고 추가할애 추가하면 되는데\n\n        this.props.setData([...add, ...tmp]);\n        this.setState({\n          loading: false,\n          pages: Math.ceil(this.state.totalRows / state.pageSize)\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    //for testo\n    apiProvider.getRowCounts(\"rules\").then(res => {\n      this.setState({\n        totalRows: res\n      });\n    });\n    this.resetColumn();\n    this.props.handleData();\n  }\n\n  toggleRow(id) {\n    const newSelected = Object.assign({}, this.state.selected);\n    newSelected[id] = !this.state.selected[id];\n    this.setState({\n      selected: newSelected,\n      selectAll: 2\n    });\n    console.log(this.state.selected);\n  }\n\n  toggleSelectAll() {\n    let newSelected = {};\n    console.log(this.state.selected);\n\n    if (this.state.selectAll === 0) {\n      this.props.data.forEach(x => {\n        newSelected[x.id] = true;\n      });\n    }\n\n    this.setState({\n      selected: newSelected,\n      selectAll: this.state.selectAll === 0 ? 1 : 0\n    });\n  }\n\n  render() {\n    const tableProps = this.props.edited == 0 ? {\n      manual: true,\n      pages: this.state.pages,\n      onFetchData: this.fetchData\n    } : {\n      manual: false\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleAdd,\n          disabled: this.props.edited !== 0,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleDelete,\n          disabled: this.props.edited !== 0,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            this.props.editZero();\n            this.props.revRe(true);\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seperate-bar-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            this.handleFieldAdd();\n          },\n          disabled: this.props.edited !== 0,\n          children: \"Field Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.openPop(true),\n          disabled: this.props.edited !== 0,\n          children: \"\\uBC30\\uD3EC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Fixed\",\n          children: /*#__PURE__*/_jsxDEV(FormProvider, {\n            form: \"inline\",\n            onSubmit: this.handleSubmit,\n            onSubmitSuccess: () => this.setState({\n              editing: null\n            }),\n            initialValues: this.state.editing,\n            enableReinitialize: true,\n            children: formProps => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: formProps.handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Table, {\n                  getTdProps: (state, rowInfo, column) => ({\n                    onClick: () => rowInfo !== undefined && this.state.editing ? this.handleClickPopUp(column.id, rowInfo.original) : undefined\n                  }),\n                  columns: this.state.columns,\n                  ...tableProps,\n                  defaultPageSize: 2,\n                  data: this.props.data // PaginationComponent={Pagination}\n                  // pageSizeOptions={[1, 10, 500, 1000]}\n                  // defaultPageSize={10}\n                  ,\n                  sorted: [{\n                    id: 'id'\n                  }] // defaultPageSize={10}\n\n                }, this.props.edited, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 41\n                }, this), this.props.selectKPop && /*#__PURE__*/_jsxDEV(SelectKeyFieldPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 633,\n                  columnNumber: 67\n                }, this), this.props.selectCPop && /*#__PURE__*/_jsxDEV(SelectConfirmsPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  version: state.fetchAPI.headVersion,\n  versionTmp: state.fetchAPI.headVersionTmp,\n  selectKPop: state.fetchAPI.openKeyField,\n  selectCPop: state.fetchAPI.openConField,\n  kfOb: state.fetchAPI.keyField,\n  data: state.fetchAPI.data,\n  refre: state.fetchAPI.refre,\n  add: state.fetchAPI.ad,\n  hflag: state.fetchAPI.hflag,\n  newField: state.fetchAPI.addedField,\n  header: state.fetchAPI.header,\n  headRestore: state.fetchAPI.headRestore,\n  his: state.fetchAPI.startHistory,\n  edited: state.fetchAPI.edited,\n  addId: state.editOperator.addId,\n  delId: state.editOperator.delId,\n  editId: state.editOperator.editId,\n  savedData: state.editOperator.savedData\n}), dispatch => {\n  return bindActionCreators({\n    setKfOb: keyFieldSelect,\n    addTmp: addTmp,\n    revRe: revRe,\n    openPop: openPop,\n    delTmp: deleteTmp,\n    currEd: currEd,\n    hisFlag: hisFlag,\n    addedField: addedField,\n    setHead: selectHead,\n    resHead: restoreHead,\n    saveVer: saveVersion,\n    restoreVer: restoreVersion,\n    startHis: startHis,\n    editZero: editZero,\n    getData: apiProvider.getLiveRules,\n    getDataFilter: apiProvider.getLiveRulesFilter,\n    addSave: addSave,\n    delSave: delSave,\n    editSave: editSave,\n    dataSave: dataSave,\n    setData: getAllR\n  }, dispatch);\n})(GridTableLDR);","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableLDR.js"],"names":["React","set","Field","Table","BS","initialData","FormProvider","avatarColumnProps","ActionsCell","HighlightCell","GridFilters","useSelector","connect","fetchAPI","addedField","addSave","currEd","dataSave","deleteTmp","delSave","editSave","editZero","getAllR","hisFlag","keyFieldSelect","openSelectKeyFieldPop","restoreHead","restoreVersion","saveVersion","selectHead","startHis","bindActionCreators","addTmp","revRe","openPop","Pagination","apiProvider","SelectKeyFieldPopup","SelectConfirmsPopup","GridTableLDR","Component","state","editing","selected","selectAll","adding","columns","selectEdit","willRemoved","temps","pages","pagesH","loading","sorted","totalRows","tableProps","selectList","typeList","groupList","getSelect","type","curr","v","filter","i","resetColumn","setState","id","accessor","Cell","original","toggleRow","props","delId","indexOf","Header","x","input","indeterminate","toggleSelectAll","sortable","width","concat","slice","map","item","editableColumnProps","maxWidth","filterable","getProps","getActionProps","componentDidUpdate","prevProps","restore","edited","ver","version","resHead","headRestore","cond","refre","nField","newField","col","header","adjustColumn","handleHeadVer","console","log","data","restoreVer","nCol","splice","handleSaveNewVer","selectableComponent","value","rest","result","Object","keys","reduce","prev","current","toLowerCase","children","index","editableComponent","undefined","isSelectField","fieldProps","component","column","handleCellClick","gridState","rowProps","mode","actions","onEdit","onCancel","delTmp","length","handleSubmit","values","addId","editAfterAdd","savedData","editId","flag","last","tmp","show","handleConFieldSelect","ob","setKfOb","openConSelectPopup","handleKeyFieldSelect","openKeySelectPopup","handleFieldAdd","openSelectPopup","handleGridData","it","con","res","active","ruletype","keyfield","confirms","updatedat","other","forEach","push","field","then","delNormal","parseInt","upsertAndHistory","temp","deActiveHead","insertHead","handleSaveSameVer","activeHead","handleSave","openSave","versionTmp","handleDelete","handleAdd","addTemp","tp","handleClickPopUp","columnId","sendWithQuery","filtered","offset","limit","pageSize","obj","filters","getFiltersCounts","getLiveRulesFilter","setData","Math","ceil","getLiveRules","d","modiData","fetchData","instance","getRowCounts","page","add","tmptmp","toString","componentDidMount","handleData","newSelected","assign","render","manual","onFetchData","formProps","rowInfo","onClick","selectKPop","selectCPop","headVersion","headVersionTmp","openKeyField","openConField","kfOb","keyField","ad","hflag","his","startHistory","editOperator","dispatch","setHead","saveVer","getData","getDataFilter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\nimport {Field} from \"redux-form\";\n// import Table from \"react-table\";\nimport Table from \"react-table\"\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport {avatarColumnProps} from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport {useSelector} from \"react-redux\";\nimport {connect} from \"react-redux\"\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport {\n    addedField, addSave,\n    currEd, dataSave,\n    deleteTmp, delSave, editSave, editZero,\n    getAllR,\n    hisFlag,\n    keyFieldSelect,\n    openSelectKeyFieldPop, restoreHead, restoreVersion, saveVersion, selectHead, startHis\n} from \"../../services/Redux/actions\";\nimport {bindActionCreators} from 'redux';\nimport {addTmp, revRe, openPop} from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport {apiProvider} from \"../../services/Provider\";\nimport \"./style.scss\"\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\n\n\nclass GridTableLDR extends React.Component {\n    state = {\n        editing: null,\n        selected: {},\n        selectAll: 0,\n        adding: false,\n        columns: [],\n        selectEdit: false,\n        willRemoved: [],\n        temps: false,\n        pages: null,\n        pagesH: null,\n        loading: true,\n        sorted: [],\n        totalRows: 0,\n        tableProps: {}\n    };\n\n    selectList = {\n        typeList: [\"String\", \"Numeric\", \"IP\"],\n        groupList: [\"Required\", \"Additional\"]\n    }\n\n    getSelect = (type, curr) => {\n        const v = this.selectList[type].filter(i => i !== curr)\n        return v\n    }\n\n    resetColumn = () => {\n        this.setState((state) => {\n            return {\n                ...state, columns:\n                    [{\n                        columns: [\n                            {\n                                id: \"checkbox\",\n                                accessor: \"\",\n                                Cell: ({original}) => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selected[original.id] === true}\n                                            onChange={() => this.toggleRow(original.id)}\n                                            disabled={this.props.delId.indexOf(original.id) !== -1} //있으면\n                                        />\n                                    );\n                                },\n                                Header: x => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selectAll === 1}\n                                            ref={input => {\n                                                if (input) {\n                                                    input.indeterminate = this.state.selectAll === 2;\n                                                }\n                                            }}\n                                            onChange={() => this.toggleSelectAll()}\n                                        />\n                                    );\n                                },\n                                sortable: false,\n                                width: 45\n                            },\n                        ]\n                    }].concat(\n                        this.props.columns.slice().map((item) => {\n                            return {...item, ...this.editableColumnProps}\n                        })\n                    )\n                        .concat(\n                            {\n                                Header: \"\",\n                                maxWidth: 90,\n                                filterable: false,\n                                getProps: this.getActionProps,\n                                Cell: ActionsCell\n                            }\n                        )\n            }\n        })\n    }\n\n    componentDidMount() {\n//for testo\n        apiProvider.getRowCounts(\"rules\").then((res) => {\n            this.setState({totalRows: res});\n        })\n        this.resetColumn()\n        this.props.handleData()\n    }\n\n    componentDidUpdate = (prevProps) => {\n\n        const restore = (prevProps.edited !== this.props.edited)\n        const ver = (prevProps.version !== this.props.version)\n        const resHead = (prevProps.headRestore !== this.props.headRestore)\n        const cond = (prevProps.refre !== this.props.refre)\n        const nField = (prevProps.newField !== this.props.newField)\n        const col = (prevProps.header !== this.props.header)\n\n        if (cond && this.props.refre && this.props.edited == 0) {\n            this.setState({editing: null})\n            this.adjustColumn(true)\n            this.props.dataSave([])\n        }\n        if (this.props.edited !== 0 && restore) {\n            this.adjustColumn(false)\n        }\n        if (col) {\n            this.resetColumn()\n        }\n        if (cond) {\n            this.props.handleHeadVer(this.props.version)\n            this.resetColumn()\n            // this.props.handleData()\n            console.log(\"hi\")\n            console.log(this.props.data)\n        }\n        if (resHead && this.props.headRestore) {\n            console.log(this.props.data[0].ver)\n            this.props.restoreVer(this.props.data[0].ver)\n            this.props.handleHeadVer(this.props.data[0].ver)\n            this.props.resHead(false)\n        }\n        if (nField) {\n            const nCol = this.state.columns\n            nCol.splice(-1, 0, {\n                Header: this.props.newField,\n                accessor: this.props.newField, ...this.editableColumnProps\n            })\n            this.setState((state) => {\n                return {\n                    ...state, columns: nCol\n                }\n            })\n        }\n        if (ver) {\n            this.handleSaveNewVer()\n        }\n    }\n\n\n    selectableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'select' : 'p';\n        const children = //여기 value 에 직접 넣을 수 있으면 좋을텐데.\n            (!editing && <HighlightCell value={value} {...rest} />) || <React.Fragment>\n                <option>{value}</option>\n                {this.getSelect(\"typeList\", value).map(\n                    (item, index) => (\n                        <option key={index} value={item}>{item}</option>\n                    )\n                )}\n            </React.Fragment>;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n\n    editableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        //input안에 name있음 이거 가지고 action넣으면 되지 않을까\n        const Component = editing ? 'input' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n    isSelectField = (col) => [\"type\", \"group\"].indexOf(col) !== -1\n\n    editableColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n            const editing = this.state.editing === props.original;\n            const fieldProps = {\n                component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n                editing,\n                props\n            };\n            return <Field name={props.column.id} {...fieldProps} />;\n\n        }\n    };\n\n    handleCellClick = (data) => {\n        // this.props.handleRow(data)\n    }\n\n    getActionProps = (gridState, rowProps) =>\n        (rowProps && {\n            mode: this.state.editing === rowProps.original ? (this.state.adding ? \"add\" : \"edit\") : \"view\",\n\n            actions: {\n                onEdit: () => {\n                    !this.state.adding && this.setState({editing: rowProps.original, adding: false})\n                },\n                onCancel: () => {\n                    this.setState({editing: null, adding: false});\n                    this.state.adding && this.props.delTmp(this.props.data.length)\n                }\n            }\n        }) ||\n        {};\n\n    toggleRow(id) {\n        const newSelected = Object.assign({}, this.state.selected);\n        newSelected[id] = !this.state.selected[id];\n        this.setState({\n            selected: newSelected,\n            selectAll: 2\n        });\n        console.log(this.state.selected)\n    }\n\n    toggleSelectAll() {\n        let newSelected = {};\n        console.log(this.state.selected)\n        if (this.state.selectAll === 0) {\n            this.props.data.forEach(x => {\n                newSelected[x.id] = true;\n            });\n        }\n\n        this.setState({\n            selected: newSelected,\n            selectAll: this.state.selectAll === 0 ? 1 : 0\n        });\n    }\n\n    handleSubmit = (values) => {\n\n        // (this.props.addId.indexOf(values.id) == -1) && this.props.editSave([values.id, ...this.props.editId]) //TODO::edit id에 이미 있는 id가 들어오면? 한번 수정한거나\n        // this.props.dataSave([values, ...this.props.savedData]) //여기서 add/edit하다가 cancel한 애들은 지워주면 됨.\n        //add하고 지운거, add하다가 cancel한거(submit을 안했겠지)\n\n        if (this.props.addId.indexOf(values.id) != -1) { //add하고 edit하면 어떡하지\n\n            const editAfterAdd = this.props.savedData.map((item)=>{\n                return item.id == values.id ? values : item\n            })\n\n            this.props.dataSave([values, ...editAfterAdd])\n\n        } else if (this.props.editSave.indexOf(values.id) != -1) {\n            //바꿔치기\n            this.props.dataSave(this.props.savedData.map((item) => {\n                return (item.id == values.id) ? values : item\n            }))\n        } else {\n            this.props.editSave([values.id, ...this.props.editId])\n            this.props.dataSave([values, ...this.props.savedData])\n        }\n\n        console.log(\"why not cancel?\") //TODO::cancel이 일로가는구나 버튼이 작아서 잘리네 잘 눌러야함..\n        this.setState((state) => {\n            this.props.addTmp(this.props.data.map((item) => {\n                return item.id === values.id ? values : item\n            }))\n\n            return state.adding ? {...state, adding: false} : {...state}\n\n        });\n    };\n\n    adjustColumn = (flag) => {\n        const last = this.state.columns[this.state.columns.length - 1]\n        const tmp = this.state.columns.slice().splice(0, this.state.columns.length - 1)\n        last.show = flag\n        this.setState({\n            columns: [\n                ...tmp,\n                last\n            ]\n        })\n    }\n    handleConFieldSelect = (ob) => {\n        this.props.setKfOb(ob) //TODO::\n        this.props.openConSelectPopup()\n    }\n    handleKeyFieldSelect = (ob) => {\n        console.log(ob)\n        this.props.setKfOb(ob)\n        this.props.openKeySelectPopup()\n    }\n\n    handleFieldAdd = () => {\n        this.props.openSelectPopup()\n    }\n\n    handleGridData = async (version) => {\n\n        const tmp = this.props.savedData\n            .filter((it) => this.props.delId.indexOf(it.id) == -1) //add했다가 cancel한 애 제외\n            .map((item) => {\n                const con = []\n                const res = (({id, active, ruletype, keyfield, confirms, ver, updatedat, ...other}) => {\n                    Object.keys(other)\n                        .filter(it => other[it] !== \"\")\n                        .forEach(it => {\n                            con.push({field: it, value: other[it]})\n                        })\n                    return ({id, active, ruletype, keyfield, confirms, ver: version})\n                })(item)\n                res['conditions'] = con\n                console.log(res)\n                return res\n            })\n\n        //TODO:: edited!==0 일때는 restore용 api를 따로 불러야함. + edited == 0 만들고 + 여기서 restore 도 아니고 saveData 없을때는 아무것도 안함.\n        if (this.props.edited != 0) {\n            apiProvider.restore(tmp, \"false\").then(() => {\n                this.props.revRe(true);\n                this.props.editZero();\n            })\n            this.adjustColumn(true)\n        } else {\n\n            this.state.willRemoved.length && this.state.willRemoved.forEach((id) => {\n                apiProvider.delNormal(\"rules\", parseInt(id)).then(() => this.setState({willRemoved: []}))\n            })\n            //upsert 로직 추가\n            //this.props.saveData --> edit, add 내역\n            console.log(\n                this.props.savedData\n            )\n            apiProvider.upsertAndHistory(\"false\", tmp).then(() => {\n                this.props.dataSave([]);\n                this.props.revRe(true)\n            })\n\n        }\n\n        //--\n        // apiProvider.delAll('rules').then(\n        //     await Promise.all(this.props.data.map((item) => { //사실 여기서 버전을 제외하고는 업데이트가 되어 있을 것.\n        //         this.props.addf(item, version)\n        //     }))\n        // )\n        // const history = {\n        //     id: \"1\",\n        //     desc: \"temp\",\n        //     user: \"admin\",\n        //     released: \"false\",\n        //     value: {\n        //         field: this.props.data.map(({ver, ...other}) => {\n        //             return Object.assign({}, other, {ver: version})\n        //         })\n        //     }\n        // }\n        // apiProvider.insert('history/livedetectrule', history).then(() => {\n        //     this.props.hisFlag(true)\n        // })\n\n    }\n\n    handleSaveNewVer = () => {\n        console.log(this.props.version)\n        const temp = this.state.columns.slice()\n        temp.splice(0, 1)\n        temp.splice(-1, 1)\n        console.log(temp.map(({Header}) => Header))\n        const header = {\n            ver: this.props.version,\n            type: \"live\",\n            header: temp.map(({Header}) => Header)\n        }\n        // apiProvider.insertHead(header).then()\n        apiProvider.deActiveHead().then(\n            () => apiProvider.insertHead(header).then(() => this.handleGridData(this.props.version))\n        )\n        // this.props.insertHead(header)\n        // this.handleGridData()\n    }\n\n    handleSaveSameVer = (version) => {\n        // this.props.activeHead(version)\n        apiProvider.deActiveHead().then(\n            apiProvider.activeHead(version).then(\n                () => this.handleGridData(version)\n            ))\n        // this.handleGridData()\n    }\n    //체크해야 되는게 291라인과 298라인 아닌가?\n    handleSave = () => {\n        // const temp = this.state.columns\n        // temp.splice(0, 1)\n        // temp.splice(-1, 1)\n        //밑에 조건 둘 중 무조건 하나만 실행됨. 그래야함..\n        if (this.props.columns.length != this.state.columns.length - 2) this.props.openSave()\n        else if (this.props.versionTmp !== \"\") this.handleSaveSameVer(this.props.versionTmp)\n        else this.handleGridData(this.props.version)\n\n    }\n\n    handleDelete = () => {\n        console.log(Object.keys(this.state.selected))\n        Object.keys(this.state.selected).forEach((i) => {\n            this.props.delTmp(i);\n            this.props.delSave([i, ...this.props.delId])\n        })\n        this.setState((state) => {\n            return {\n                ...state,\n                selected: {},\n                willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n            }\n        })\n\n    }\n\n    //TODO::add 여러번 하게하면 안됨. + 자동으로 index 생성되게 해야되는데 + livedetectrule add row가 이상한곳에 생김. 왠진 모르겠는데 해결됨.\n    handleAdd = () => {\n        const addTemp = this.state.columns.slice()\n        addTemp.splice(-1, 1)\n        addTemp.splice(0, 1)\n        const tp = {};\n        addTemp.forEach(({accessor}) => {\n            tp[accessor] = \"\"\n        })\n        tp.id = this.props.data.length + 1\n        console.log(this.props.data.length)\n        this.setState((state) => {\n            return {...state, editing: tp, adding: true}\n        })\n        console.log(tp)\n        this.props.addTmp([tp, ...this.props.data])\n        this.props.addSave([tp.id, ...this.props.addId])\n    }\n\n\n    handleClickPopUp = (columnId, data) => {\n        switch (columnId) {\n            case \"keyfield\" :\n                return this.handleKeyFieldSelect(data)\n            case \"confirms\" :\n                return this.handleConFieldSelect(data)\n            default:\n                return\n        }\n    }\n\n    sendWithQuery = (filtered, offset, limit, pageSize) => {\n        const ob = {}\n        filtered.forEach(({id, value}) => {\n            ob[id] = value\n        })\n        const obj = {\n            offset: offset,\n            limit: limit,\n            filters: ob\n        }\n        //TODO:: for filtered 이거 async 라 추후 초치 필요할듯\n        apiProvider.getFiltersCounts(\"rules\", obj).then((res) => this.setState({totalRows: res}))\n        //TODO:: debounce it\n        apiProvider.getLiveRulesFilter(obj).then((res) => {\n            this.props.setData(res.map((item) => {\n                return (this.props.editId.indexOf(item.id) && this.props.savedData) ? this.props.savedData.map((i) => {\n                    return i.id == item.id && i\n                }) : item\n            }))\n            this.setState({loading: false, pages: Math.ceil(this.state.totalRows / pageSize)})\n        })\n    }\n\n    tmp = () => {\n        //add하고 지운거, add하다가 cancel한거(submit을 안했겠지) + savedData 지우는 시점에 나머지도 다 날려.\n\n        apiProvider.getLiveRules(0, 2).then((res) => {\n            const d = res.map((item) => {\n                const modiData = this.props.savedData\n                    .filter((it) => this.props.delId.indexOf(it.id) == -1)\n                    .filter((data) => {\n                        if (this.props.editId.indexOf(item.id)) {\n                            return data\n                        }\n                        else return\n                    })\n                return modiData[0]\n            })\n            //if 첫페이지면 d에다가 addId 추가 if(state==0)\n            d.concat(this.savedData.filter((data) => {\n                this.props.addId.indexOf(data.id)\n            }))\n        })\n    }\n\n    fetchData = (state, instance) => {\n\n        apiProvider.getRowCounts(\"rules\").then((res) => this.setState({totalRows: res}))\n        this.setState({loading: true})\n        const offset = state.page * state.pageSize\n        const limit = state.pageSize\n\n        // console.log((i.id === item.id) && item)\n        console.log(this.props.savedData)\n        console.log(this.props.delId)\n        //TODO:: page 1(가장처음 또는 내가 add 누를때 있던 그 페이지던지) 일때 add 한 내역들 다 보여주게 해야함. + bulkupsert 안됨\n        state.filtered.length ? (\n            this.sendWithQuery(state.filtered, offset, limit, state.pageSize)\n        ) : (\n            apiProvider.getLiveRules(offset, limit).then((res) => {\n                // const tmp = this.props.savedData\n                //     .filter((it) => this.props.delId.indexOf(it.id) == -1) //add했다가 cancel한 애 제외\n                const add = this.props.savedData\n                    .filter((it)=>this.props.delId.indexOf(it.id)==-1)\n                    .filter((i)=>this.props.addId.indexOf(i.id)!==-1) //add하고 edit하면 어떢하지\n\n                const tmptmp = res.filter((i)=>this.props.delId.indexOf(i.id) == -1)\n                console.log(tmptmp)\n                const tmp = res\n                    .filter((i)=>this.props.delId.indexOf(i.id.toString()) == -1) //=>얘를 체크박스로 바꾸면 될거같은데\n                    .map((item) => {\n                    // return ((this.props.editId.indexOf(item.id) !== -1) && this.props.savedData.length) ? this.props.savedData.filter(i => i.id === item.id)[0] : item\n                    if(this.props.editId.indexOf(item.id) !== -1) return this.props.savedData.filter(i=>i.id===item.id)[0]\n                    else return item\n\n                }) //+여기서 지울애 지우고 추가할애 추가하면 되는데\n                this.props.setData([...add, ...tmp])\n                this.setState({loading: false, pages: Math.ceil(this.state.totalRows / state.pageSize)})\n            })\n        )\n    }\n\n    render() {\n        const tableProps = this.props.edited == 0 ? {\n            manual: true,\n            pages: this.state.pages,\n            onFetchData: this.fetchData\n        } : {\n            manual: false\n        }\n        return (\n            <React.Fragment>\n\n                <div className=\"btns\">\n                    <button className=\"btn\" onClick={this.handleAdd} disabled={this.props.edited !== 0}>\n                        Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleDelete} disabled={this.props.edited !== 0}>\n                        Delete\n                    </button>\n                    <button className=\"btn\" onClick={() => {\n                        this.props.editZero();\n                        this.props.revRe(true)\n                    }}>\n                        Refresh\n                    </button>\n\n                    <div className=\"seperate-bar-100\"/>\n\n                    <button className=\"btn\" onClick={() => {\n                        this.handleFieldAdd()\n                    }} disabled={this.props.edited !== 0}>\n                        Field Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleSave}>\n                        Save\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.openPop(true)} disabled={this.props.edited !== 0}>\n                        배포\n                    </button>\n                </div>\n                <div className=\"table-wrapper\">\n                    <div className=\"Fixed\">\n\n                        <FormProvider\n                            form=\"inline\"\n                            onSubmit={this.handleSubmit}\n                            onSubmitSuccess={() => this.setState({editing: null})}\n                            initialValues={this.state.editing}\n                            enableReinitialize\n                        >\n                            {(formProps) => {\n                                return (\n                                    <form onSubmit={formProps.handleSubmit}>\n                                        <Table\n                                            key={this.props.edited}\n                                            getTdProps={(state, rowInfo, column) => ({\n                                                onClick: () => (rowInfo !== undefined && this.state.editing) ? this.handleClickPopUp(column.id, rowInfo.original) : undefined\n                                            })}\n                                            columns={\n                                                this.state.columns\n                                            }\n                                            {...tableProps}\n                                            defaultPageSize={2}\n                                            data={this.props.data}\n                                            // PaginationComponent={Pagination}\n                                            // pageSizeOptions={[1, 10, 500, 1000]}\n                                            // defaultPageSize={10}\n                                            sorted={[{id: 'id'}]}\n\n                                            // defaultPageSize={10}\n                                        />\n                                        {this.props.selectKPop && <SelectKeyFieldPopup></SelectKeyFieldPopup>}\n                                        {this.props.selectCPop && <SelectConfirmsPopup></SelectConfirmsPopup>}\n                                    </form>\n                                );\n                            }}\n                        </FormProvider>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        version: state.fetchAPI.headVersion,\n        versionTmp: state.fetchAPI.headVersionTmp,\n        selectKPop: state.fetchAPI.openKeyField,\n        selectCPop: state.fetchAPI.openConField,\n        kfOb: state.fetchAPI.keyField,\n        data: state.fetchAPI.data,\n        refre: state.fetchAPI.refre,\n        add: state.fetchAPI.ad,\n        hflag: state.fetchAPI.hflag,\n        newField: state.fetchAPI.addedField,\n        header: state.fetchAPI.header,\n        headRestore: state.fetchAPI.headRestore,\n        his: state.fetchAPI.startHistory,\n\n        edited: state.fetchAPI.edited,\n\n        addId: state.editOperator.addId,\n        delId: state.editOperator.delId,\n        editId: state.editOperator.editId,\n        savedData: state.editOperator.savedData\n    }),\n    dispatch => {\n        return bindActionCreators(\n            {\n                setKfOb: keyFieldSelect,\n                addTmp: addTmp,\n                revRe: revRe,\n                openPop: openPop,\n                delTmp: deleteTmp,\n                currEd: currEd,\n                hisFlag: hisFlag,\n                addedField: addedField,\n                setHead: selectHead,\n                resHead: restoreHead,\n                saveVer: saveVersion,\n                restoreVer: restoreVersion,\n                startHis: startHis,\n\n                editZero: editZero,\n                getData: apiProvider.getLiveRules,\n                getDataFilter: apiProvider.getLiveRulesFilter,\n\n                addSave: addSave,\n                delSave: delSave,\n                editSave: editSave,\n                dataSave: dataSave,\n                setData: getAllR\n            },\n            dispatch\n        )\n    }\n)(GridTableLDR)"]},"metadata":{},"sourceType":"module"}