{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableNormal.js\";\nimport React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\n\nimport { Field } from \"redux-form\"; // import Table from \"react-table\";\n\nimport Table from \"react-table\";\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport { avatarColumnProps } from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport { useSelector } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport 'react-table/react-table.css';\nimport { addedField, addSave, currEd, deleteTmp, delSave, editSave, editZero, getAllHN, getAllR, hisFlag, keyFieldSelect, openSelectKeyFieldPop, selectHead } from \"../../services/Redux/actions\";\nimport { bindActionCreators } from 'redux';\nimport { addTmp, revRe, openPop } from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport { apiProvider } from \"../../services/Provider\";\nimport \"./style.scss\";\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\nimport _, { debounce } from \"lodash\";\nimport { TransferWithinAStation } from \"@material-ui/icons\"; //TODO:: 이 테이블들.. 나중에 합칠거임.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GridTableNormal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: null,\n      selected: {},\n      selectAll: 0,\n      adding: false,\n      columns: [],\n      selectEdit: false,\n      willRemoved: [],\n      temps: false,\n      pages: null,\n      pagesH: null,\n      loading: true,\n      sorted: [],\n      totalRows: 0,\n      tableProps: {}\n    };\n    this.selectList = {\n      typeList: [\"String\", \"Numeric\", \"IP\"],\n      groupList: [\"Required\", \"Additional\"]\n    };\n\n    this.resetColumn = () => {\n      this.setState(state => {\n        return { ...state,\n          columns: [{\n            columns: [{\n              id: \"checkbox\",\n              accessor: \"\",\n              Cell: ({\n                original\n              }) => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selected[original.id] === true,\n                  onChange: () => this.toggleRow(original.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 41\n                }, this);\n              },\n              Header: x => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selectAll === 1,\n                  ref: input => {\n                    if (input) {\n                      input.indeterminate = this.state.selectAll === 2;\n                    }\n                  },\n                  onChange: () => this.toggleSelectAll()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 41\n                }, this);\n              },\n              sortable: false,\n              width: 45\n            }]\n          }].concat(this.props.columns.slice().map(item => {\n            console.log(item);\n            return item.accessor !== \"vendors\" ? { ...item,\n              ...this.editableColumnProps\n            } : { ...item\n            };\n          })).concat({\n            Header: \"\",\n            maxWidth: 90,\n            filterable: false,\n            getProps: this.getActionProps,\n            Cell: ActionsCell\n          })\n        };\n      });\n    };\n\n    this.getSelect = (type, curr) => {\n      const v = this.selectList[type].filter(i => i !== curr);\n      return v;\n    };\n\n    this.fetchData = (state, instance) => {\n      apiProvider.getRowCounts().then(res => this.setState({\n        totalRows: res\n      })); //TODO::이거 동기 맞춰야함.\n\n      this.setState({\n        loading: true\n      });\n      const offset = state.page * state.pageSize;\n      console.log(state.page);\n      const limit = state.pageSize;\n      state.filtered.length ? this.sendWithQuery(state.filtered, offset, limit, state.pageSize) //TODO:: 앞에 handleData 랑 아구 맞추어 놓을것~ 아마 componentdidmount에서 없어도 될것임.\n      : this.props.getData(offset, limit).then(res => {\n        this.setState({\n          loading: false,\n          pages: Math.ceil(this.state.totalRows / state.pageSize)\n        });\n      });\n    };\n\n    this.tp = {};\n\n    this.componentDidUpdate = prevProps => {\n      const ed = prevProps.edited !== this.props.edited;\n      const cond = prevProps.refre !== this.props.refre; // const his = (this.props.hflag && (prevProps.hflag !== this.props.hflag))\n\n      const temp = prevProps.temps !== this.state.temps;\n\n      if (cond && this.props.refre) {\n        this.setState({\n          editing: null\n        });\n        this.props.handleData();\n        this.props.editZero(); // this.props.revRe(false)\n      }\n\n      if (temp && this.state.temps) {\n        apiProvider.setHistory().then(() => this.props.hisFlag(true));\n        this.setState({\n          temps: false\n        });\n      }\n    };\n\n    this.selectableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      //TODO:: 이부분이 셀 filtering 하는 부분 인가?\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'select' : 'p';\n\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 26\n      }, this) || /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this), this.getSelect(\"typeList\", value).map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 72\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.editableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'input' : 'p';\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 26\n      }, this) || undefined;\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.isSelectField = col => [\"type\", \"group\"].indexOf(col) !== -1;\n\n    this.editableColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n          editing,\n          props\n        };\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: props.column.id,\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.getActionProps = (gridState, rowProps) => rowProps && {\n      mode: this.state.editing === rowProps.original ? this.state.adding ? \"add\" : \"edit\" : \"view\",\n      actions: {\n        onEdit: () => {\n          !this.state.adding && this.setState({\n            editing: rowProps.original,\n            adding: false\n          });\n        },\n        onCancel: () => {\n          this.setState({\n            editing: null,\n            adding: false\n          });\n          this.state.adding && this.props.delTmp(this.props.data.length);\n        }\n      }\n    } || {};\n\n    this.handleSubmit = values => {\n      this.setState(state => {\n        this.props.addTmp(this.props.data.map(item => {\n          return item.id === values.id ? values : item;\n        }));\n        return state.adding ? { ...state,\n          adding: false\n        } : { ...state\n        };\n      });\n    };\n\n    this.handleSave = () => {\n      this.state.willRemoved.length && this.state.willRemoved.forEach(id => {\n        apiProvider.delNormal(parseInt(id)).then(() => this.setState({\n          willRemoved: []\n        }));\n      });\n      this.handleSaveAfterDelete().then(() => this.setState({\n        temps: true\n      }));\n    };\n\n    this.handleDelete = () => {\n      Object.keys(this.state.selected).forEach(i => this.props.delTmp(i));\n      this.setState(state => {\n        return { ...state,\n          selected: {},\n          willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n        };\n      });\n    };\n\n    this.handleAdd = () => {\n      const addTemp = this.state.columns.slice();\n      addTemp.splice(-1, 1);\n      addTemp.splice(0, 1);\n      const tp = {};\n      addTemp.forEach(({\n        accessor\n      }) => {\n        tp[accessor] = \"\";\n      });\n      tp[\"rules\"] = [];\n      tp.id = Math.max(0, ...this.props.data.slice().map(v => v.id)) + 1; //TODO:: => api 근데 왜 이렇게 하면 안됐더라?\n\n      this.setState(state => {\n        return { ...state,\n          editing: tp,\n          adding: true\n        };\n      });\n      console.log(tp);\n      this.props.addTmp([tp, ...this.props.data]);\n    };\n\n    this.handleClickPopUp = (columnId, data) => {\n      console.log(this);\n      this.props.handleRow(data); //id->classifier(PK)\n    };\n\n    this.sendWithQuery = (filtered, offset, limit, pageSize) => {\n      const ob = {};\n      filtered.forEach(({\n        id,\n        value\n      }) => {\n        ob[id] = value;\n      });\n      const obj = {\n        offset: offset,\n        limit: limit,\n        filters: ob\n      }; //TODO:: for filtered 이거 async 라 추후 초치 필요할듯\n\n      apiProvider.getFiltersCounts(obj).then(res => this.setState({\n        totalRows: res\n      })); //TODO:: debounce it\n\n      this.props.getDataFilter(obj).then(res => {\n        this.setState({\n          loading: false,\n          pages: Math.ceil(this.state.totalRows / pageSize)\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    apiProvider.getRowCounts().then(res => {\n      this.setState({\n        totalRows: res\n      });\n      console.log(res);\n    });\n    this.resetColumn(); // this.props.handleData()\n  }\n\n  toggleRow(id) {\n    const newSelected = Object.assign({}, this.state.selected);\n    newSelected[id] = !this.state.selected[id];\n    this.setState({\n      selected: newSelected,\n      selectAll: 2\n    });\n    console.log(this.state.selected);\n  }\n\n  toggleSelectAll() {\n    let newSelected = {};\n    console.log(this.state.selected);\n\n    if (this.state.selectAll === 0) {\n      this.props.data.forEach(x => {\n        newSelected[x.id] = true;\n      });\n    }\n\n    this.setState({\n      selected: newSelected,\n      selectAll: this.state.selectAll === 0 ? 1 : 0\n    });\n  }\n\n  async handleSaveAfterDelete() {\n    return await Promise.all(this.props.data.map(item => item.hasOwnProperty(\"rules\") ? this.props.handleAddTotal(item) : this.props.handleAdd(item)));\n  }\n\n  render() {\n    const tableProps = this.props.edited == 0 ? {\n      manual: true,\n      pages: this.state.pages,\n      onFetchData: this.fetchData\n    } : {\n      manual: false //TODO:: restore 하는게 바뀌면 초기화 해야하는데 ->이러면 rerender가 아니고 끄고 다시 켜야할거같은데\n\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleAdd,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleDelete,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.revRe(true),\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seperate-bar-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.openPop(true),\n          children: \"\\uBC30\\uD3EC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Fixed\",\n          children: /*#__PURE__*/_jsxDEV(FormProvider, {\n            form: \"inline\",\n            onSubmit: this.handleSubmit,\n            onSubmitSuccess: () => this.setState({\n              editing: null\n            }),\n            initialValues: this.state.editing,\n            enableReinitialize: true,\n            children: formProps => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: formProps.handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Table, {\n                  getTdProps: (state, rowInfo, column) => ({\n                    onClick: () => !this.state.editing ? this.handleClickPopUp(column.id, rowInfo.original) : undefined //TODO::nullcheck 편집중에 다른 행 만지면 클남..\n\n                  }),\n                  columns: this.state.columns,\n                  ...tableProps,\n                  defaultPageSize: 2,\n                  data: this.props.data // filterable\n                  // onFilteredChange={(onFilterChange)=>debounce(onFilterChange, 1000)}\n                  ,\n                  sorted: [{\n                    id: 'id'\n                  }]\n                }, this.props.edited, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 41\n                }, this), this.props.selectKPop && /*#__PURE__*/_jsxDEV(SelectKeyFieldPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 67\n                }, this), this.props.selectCPop && /*#__PURE__*/_jsxDEV(SelectConfirmsPopup, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 67\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  version: state.fetchAPI.headVersion,\n  selectKPop: state.fetchAPI.openKeyField,\n  selectCPop: state.fetchAPI.openConField,\n  kfOb: state.fetchAPI.keyField,\n  data: state.fetchAPI.data,\n  refre: state.fetchAPI.refre,\n  add: state.fetchAPI.ad,\n  hflag: state.fetchAPI.hflag,\n  newField: state.fetchAPI.addedField,\n  edited: state.fetchAPI.edited\n}), dispatch => {\n  return bindActionCreators({\n    getData: apiProvider.getNormalizeRule,\n    getDataFilter: apiProvider.getNormalizeRuleFilter,\n    setKfOb: keyFieldSelect,\n    addTmp: addTmp,\n    revRe: revRe,\n    openPop: openPop,\n    delTmp: deleteTmp,\n    currEd: currEd,\n    hisFlag: hisFlag,\n    addedField: addedField,\n    setHead: selectHead,\n    getAllHN: getAllHN,\n    editZero: editZero,\n    addSave: addSave,\n    delSave: delSave,\n    editSave: editSave\n  }, dispatch);\n})(GridTableNormal);","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTableNormal.js"],"names":["React","set","Field","Table","BS","initialData","FormProvider","avatarColumnProps","ActionsCell","HighlightCell","GridFilters","useSelector","connect","fetchAPI","addedField","addSave","currEd","deleteTmp","delSave","editSave","editZero","getAllHN","getAllR","hisFlag","keyFieldSelect","openSelectKeyFieldPop","selectHead","bindActionCreators","addTmp","revRe","openPop","Pagination","apiProvider","SelectKeyFieldPopup","SelectConfirmsPopup","_","debounce","TransferWithinAStation","GridTableNormal","Component","state","editing","selected","selectAll","adding","columns","selectEdit","willRemoved","temps","pages","pagesH","loading","sorted","totalRows","tableProps","selectList","typeList","groupList","resetColumn","setState","id","accessor","Cell","original","toggleRow","Header","x","input","indeterminate","toggleSelectAll","sortable","width","concat","props","slice","map","item","console","log","editableColumnProps","maxWidth","filterable","getProps","getActionProps","getSelect","type","curr","v","filter","i","fetchData","instance","getRowCounts","then","res","offset","page","pageSize","limit","filtered","length","sendWithQuery","getData","Math","ceil","tp","componentDidUpdate","prevProps","ed","edited","cond","refre","temp","handleData","setHistory","selectableComponent","value","rest","result","Object","keys","reduce","prev","current","toLowerCase","children","index","editableComponent","undefined","isSelectField","col","indexOf","fieldProps","component","column","gridState","rowProps","mode","actions","onEdit","onCancel","delTmp","data","handleSubmit","values","handleSave","forEach","delNormal","parseInt","handleSaveAfterDelete","handleDelete","handleAdd","addTemp","splice","max","handleClickPopUp","columnId","handleRow","ob","obj","filters","getFiltersCounts","getDataFilter","componentDidMount","newSelected","assign","Promise","all","hasOwnProperty","handleAddTotal","render","manual","onFetchData","formProps","rowInfo","onClick","selectKPop","selectCPop","version","headVersion","openKeyField","openConField","kfOb","keyField","add","ad","hflag","newField","dispatch","getNormalizeRule","getNormalizeRuleFilter","setKfOb","setHead"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\nimport {Field} from \"redux-form\";\n// import Table from \"react-table\";\nimport Table from \"react-table\"\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport {avatarColumnProps} from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport {useSelector} from \"react-redux\";\nimport {connect} from \"react-redux\"\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport 'react-table/react-table.css';\nimport {\n    addedField, addSave,\n    currEd,\n    deleteTmp, delSave, editSave, editZero, getAllHN,\n    getAllR,\n    hisFlag,\n    keyFieldSelect,\n    openSelectKeyFieldPop, selectHead\n} from \"../../services/Redux/actions\";\nimport {bindActionCreators} from 'redux';\nimport {addTmp, revRe, openPop} from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport {apiProvider} from \"../../services/Provider\";\nimport \"./style.scss\"\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\nimport SelectConfirmsPopup from \"../popup/SelectConfirmsPopup\";\nimport _, {debounce} from \"lodash\"\nimport {TransferWithinAStation} from \"@material-ui/icons\";\n\n\n//TODO:: 이 테이블들.. 나중에 합칠거임.\nclass GridTableNormal extends React.Component {\n    state = {\n        editing: null,\n        selected: {},\n        selectAll: 0,\n        adding: false,\n        columns: [],\n        selectEdit: false,\n        willRemoved: [],\n        temps: false,\n        pages: null,\n        pagesH: null,\n        loading: true,\n        sorted: [],\n        totalRows: 0,\n        tableProps: {}\n    };\n\n    selectList = {\n        typeList: [\"String\", \"Numeric\", \"IP\"],\n        groupList: [\"Required\", \"Additional\"]\n    }\n\n    //TODO:: Livedetectrule 처럼 필드가 유동적이진 않아서 이렇게 안해도됨. 고쳐야할 것\n    resetColumn = () => {\n        this.setState((state) => {\n            return {\n                ...state, columns:\n                    [{\n                        columns: [\n                            {\n                                id: \"checkbox\",\n                                accessor: \"\",\n                                Cell: ({original}) => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selected[original.id] === true}\n                                            onChange={() => this.toggleRow(original.id)}\n                                        />\n                                    );\n                                },\n                                Header: x => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selectAll === 1}\n                                            ref={input => {\n                                                if (input) {\n                                                    input.indeterminate = this.state.selectAll === 2;\n                                                }\n                                            }}\n                                            onChange={() => this.toggleSelectAll()}\n                                        />\n                                    );\n                                },\n                                sortable: false,\n                                width: 45\n                            },\n                        ]\n                    }].concat(\n                        this.props.columns.slice().map((item) => {\n                            console.log(item)\n                            return item.accessor !== \"vendors\" ? {...item, ...this.editableColumnProps} : {...item}\n                        })\n                    )\n                        .concat(\n                            {\n                                Header: \"\",\n                                maxWidth: 90,\n                                filterable: false,\n                                getProps: this.getActionProps,\n                                Cell: ActionsCell\n                            }\n                        )\n            }\n        })\n    }\n    getSelect = (type, curr) => {\n        const v = this.selectList[type].filter(i => i !== curr)\n        return v\n    }\n\n    fetchData = (state, instance) => {\n\n        apiProvider.getRowCounts().then((res) => this.setState({totalRows: res})) //TODO::이거 동기 맞춰야함.\n        this.setState({loading: true})\n        const offset = state.page * state.pageSize\n        console.log(state.page)\n        const limit = state.pageSize\n\n        state.filtered.length ? (\n            this.sendWithQuery(state.filtered, offset, limit, state.pageSize)\n            //TODO:: 앞에 handleData 랑 아구 맞추어 놓을것~ 아마 componentdidmount에서 없어도 될것임.\n        ) : (\n            this.props.getData(offset, limit).then((res) => {\n                this.setState({loading: false, pages: Math.ceil(this.state.totalRows / state.pageSize)})\n            }))\n    }\n\n    tp = {}\n\n    componentDidMount() {\n\n        apiProvider.getRowCounts().then((res) => {\n            this.setState({totalRows: res});\n            console.log(res)\n        })\n        this.resetColumn()\n        // this.props.handleData()\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const ed = (prevProps.edited !== this.props.edited)\n        const cond = (prevProps.refre !== this.props.refre)\n        // const his = (this.props.hflag && (prevProps.hflag !== this.props.hflag))\n        const temp = (prevProps.temps !== this.state.temps)\n        if (cond && this.props.refre) {\n            this.setState({editing: null})\n            this.props.handleData()\n            this.props.editZero()\n            // this.props.revRe(false)\n        }\n        if (temp && this.state.temps) {\n            apiProvider.setHistory().then(() => this.props.hisFlag(true))\n            this.setState({temps: false})\n        }\n    }\n\n    selectableComponent = ({input, editing, value, ...rest}) => {\n        //TODO:: 이부분이 셀 filtering 하는 부분 인가?\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'select' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || <React.Fragment>\n                <option>{value}</option>\n                {this.getSelect(\"typeList\", value).map(\n                    (item, index) => (\n                        <option key={index} value={item}>{item}</option>\n                    )\n                )}\n            </React.Fragment>;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n\n    editableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'input' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n    isSelectField = (col) => [\"type\", \"group\"].indexOf(col) !== -1\n\n    editableColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n            const editing = this.state.editing === props.original;\n            const fieldProps = {\n                component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n                editing,\n                props\n            };\n            return <Field name={props.column.id} {...fieldProps} />;\n\n        }\n    };\n\n    getActionProps = (gridState, rowProps) =>\n        (rowProps && {\n            mode: this.state.editing === rowProps.original ? (this.state.adding ? \"add\" : \"edit\") : \"view\",\n\n            actions: {\n                onEdit: () => {\n                    !this.state.adding && this.setState({editing: rowProps.original, adding: false})\n                },\n                onCancel: () => {\n                    this.setState({editing: null, adding: false});\n                    this.state.adding && this.props.delTmp(this.props.data.length)\n                }\n            }\n        }) ||\n        {};\n\n    toggleRow(id) {\n        const newSelected = Object.assign({}, this.state.selected);\n        newSelected[id] = !this.state.selected[id];\n        this.setState({\n            selected: newSelected,\n            selectAll: 2\n        });\n        console.log(this.state.selected)\n    }\n\n    toggleSelectAll() {\n        let newSelected = {};\n        console.log(this.state.selected)\n        if (this.state.selectAll === 0) {\n            this.props.data.forEach(x => {\n                newSelected[x.id] = true;\n            });\n        }\n\n        this.setState({\n            selected: newSelected,\n            selectAll: this.state.selectAll === 0 ? 1 : 0\n        });\n    }\n\n    handleSubmit = (values) => {\n        this.setState((state) => {\n            this.props.addTmp(this.props.data.map((item) => {\n                return item.id === values.id ? values : item\n            }))\n\n            return state.adding ? {...state, adding: false} : {...state}\n\n        });\n    };\n\n    async handleSaveAfterDelete() {\n        return await Promise.all(this.props.data.map((item) =>\n            item.hasOwnProperty(\"rules\") ? this.props.handleAddTotal(item) : this.props.handleAdd(item)\n        ))\n    }\n\n    handleSave = () => {\n        this.state.willRemoved.length && this.state.willRemoved.forEach((id) => {\n            apiProvider.delNormal(parseInt(id)).then(() => this.setState({willRemoved: []}))\n        })\n        this.handleSaveAfterDelete().then(() => this.setState({temps: true}))\n\n    }\n\n    handleDelete = () => {\n        Object.keys(this.state.selected).forEach((i) =>\n            this.props.delTmp(i)\n        )\n        this.setState((state) => {\n            return {\n                ...state,\n                selected: {},\n                willRemoved: [...Object.keys(this.state.selected), ...this.state.willRemoved]\n            }\n        })\n\n\n    }\n\n    handleAdd = () => {\n        const addTemp = this.state.columns.slice()\n        addTemp.splice(-1, 1)\n        addTemp.splice(0, 1)\n        const tp = {};\n        addTemp.forEach(({accessor}) => {\n            tp[accessor] = \"\"\n        })\n        tp[\"rules\"] = []\n        tp.id = Math.max(0, ...this.props.data.slice().map(v => v.id)) + 1 //TODO:: => api 근데 왜 이렇게 하면 안됐더라?\n\n        this.setState((state) => {\n            return {...state, editing: tp, adding: true}\n        })\n        console.log(tp)\n        this.props.addTmp([tp, ...this.props.data])\n    }\n\n\n    handleClickPopUp = (columnId, data) => {\n        console.log(this)\n        this.props.handleRow(data) //id->classifier(PK)\n    }\n\n    sendWithQuery = (filtered, offset, limit, pageSize) => {\n        const ob = {}\n        filtered.forEach(({id, value}) => {\n            ob[id] = value\n        })\n        const obj = {\n            offset: offset,\n            limit: limit,\n            filters: ob\n        }\n        //TODO:: for filtered 이거 async 라 추후 초치 필요할듯\n        apiProvider.getFiltersCounts(obj).then((res) => this.setState({totalRows: res}))\n        //TODO:: debounce it\n        this.props.getDataFilter(obj).then((res) => {\n            this.setState({loading: false, pages: Math.ceil(this.state.totalRows / pageSize)})\n        })\n    }\n\n    render() {\n\n        const tableProps = this.props.edited == 0 ? {\n            manual: true,\n            pages: this.state.pages,\n            onFetchData: this.fetchData\n        } : {\n            manual: false //TODO:: restore 하는게 바뀌면 초기화 해야하는데 ->이러면 rerender가 아니고 끄고 다시 켜야할거같은데\n        }\n        return (\n            <React.Fragment>\n\n                <div className=\"btns\">\n                    <button className=\"btn\" onClick={this.handleAdd}>\n                        Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleDelete}>\n                        Delete\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.revRe(true)}>\n                        Refresh\n                    </button>\n\n                    <div className=\"seperate-bar-100\"/>\n\n                    <button className=\"btn\" onClick={this.handleSave}>\n                        Save\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.openPop(true)}>\n                        배포\n                    </button>\n                </div>\n                <div className=\"table-wrapper\">\n                    <div className=\"Fixed\">\n\n                        <FormProvider\n                            form=\"inline\"\n                            onSubmit={this.handleSubmit}\n                            onSubmitSuccess={() => this.setState({editing: null})}\n                            initialValues={this.state.editing}\n                            enableReinitialize\n                        >\n                            {(formProps) => {\n                                return (\n                                    <form onSubmit={formProps.handleSubmit}>\n                                        <Table\n                                            key = {this.props.edited}\n\n                                            getTdProps={(state, rowInfo, column) => ({\n                                                onClick: () => !this.state.editing ? this.handleClickPopUp(column.id, rowInfo.original) : undefined //TODO::nullcheck 편집중에 다른 행 만지면 클남..\n                                            })}\n                                            columns={\n                                                this.state.columns\n                                            }\n                                            {...tableProps}\n                                            defaultPageSize={2}\n                                            data={this.props.data}\n                                            // filterable\n                                            // onFilteredChange={(onFilterChange)=>debounce(onFilterChange, 1000)}\n                                            sorted={[{id: 'id'}]}\n                                        />\n                                        {this.props.selectKPop && <SelectKeyFieldPopup></SelectKeyFieldPopup>}\n                                        {this.props.selectCPop && <SelectConfirmsPopup></SelectConfirmsPopup>}\n\n                                    </form>\n                                );\n                            }}\n                        </FormProvider>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        version: state.fetchAPI.headVersion,\n        selectKPop: state.fetchAPI.openKeyField,\n        selectCPop: state.fetchAPI.openConField,\n        kfOb: state.fetchAPI.keyField,\n        data: state.fetchAPI.data,\n        refre: state.fetchAPI.refre,\n        add: state.fetchAPI.ad,\n        hflag: state.fetchAPI.hflag,\n        newField: state.fetchAPI.addedField,\n        edited: state.fetchAPI.edited\n    }),\n    dispatch => {\n        return bindActionCreators(\n            {\n                getData: apiProvider.getNormalizeRule,\n                getDataFilter: apiProvider.getNormalizeRuleFilter,\n                setKfOb: keyFieldSelect,\n                addTmp: addTmp,\n                revRe: revRe,\n                openPop: openPop,\n                delTmp: deleteTmp,\n                currEd: currEd,\n                hisFlag: hisFlag,\n                addedField: addedField,\n                setHead: selectHead,\n                getAllHN: getAllHN,\n                editZero: editZero,\n\n                addSave: addSave,\n                delSave: delSave,\n                editSave: editSave\n\n\n            },\n            dispatch\n        )\n    }\n)(GridTableNormal)"]},"metadata":{},"sourceType":"module"}