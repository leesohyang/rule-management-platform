{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/NodeSelect.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { useForm, Form } from \"./useForm\";\nimport Input from \"./controls/Input\";\nimport Select from \"./controls/Select\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { apiProvider } from \"../services/Provider\";\nimport MultiSelect from \"./controls/MultiSelect\";\nimport { getEntityFrom, revRe, selectedOp, selectedOpFrom } from \"../services/Redux/actions\";\nimport { getEntities } from \"../services/Redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n})); //clicked data 있으면 from node 설정 안하게 만들어놔야함.\n\nfunction NodeSelect(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // const data = useSelector(state => state.SlidePop.clickedData)\n  // const classes = useStyles();\n  // const mounted = React.useRef(false);\n  // // const [cat, setCat] = React.useState('');\n  const [entityTypes, setEntityTypes] = React.useState([]);\n  const [vendors, setVendors] = React.useState([]);\n  const [models, setModels] = React.useState([]); // const [entities, setEntities] = React.useState(\"\");\n\n  const entities = useSelector(state => state.SlidePop.entities);\n  const entityFrom = useSelector(state => state.SlidePop.entityFrom); // const selected = useSelector(state=>state.SlidePop.selectedData)\n\n  const selectedFrom = useSelector(state => state.SlidePop.selectedDataF);\n  const [state, setState] = useState([{\n    relation: '',\n    fromNodeID: '',\n    toNodeID: ''\n  }]);\n  const dispatch = useDispatch();\n  const validate = {}; //todo::validation만들기\n\n  const initialFValues = {\n    cat: '',\n    model: '',\n    vendor: '',\n    entityType: '',\n    relation: 'contain',\n    // from_node_id: data.id,\n    // to_node_id: '',\n    createdAt: '1',\n    updatedAt: '1'\n  };\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, false, validate);\n\n  const handleInputChange2 = event => {\n    const value = event.target.value; // dispatch(selectedOp(value))\n\n    dispatch(selectedOpFrom(value)); //그냥 문자열로 들어갈거같은뎅\n  }; //custom hook\n\n\n  function useEffectSkipFirst(fn, arr) {\n    _s();\n\n    const isFirst = React.useRef(true);\n    useEffect(() => {\n      if (isFirst.current) {\n        isFirst.current = false;\n        return;\n      }\n\n      return fn();\n    }, arr);\n  }\n\n  _s(useEffectSkipFirst, \"x0DIufxRLPW/5DynbDxfl2fdtNU=\");\n\n  useEffectSkipFirst(() => {\n    apiProvider.getTypes(values.cat).then(res => setEntityTypes(res.data));\n    console.log(\"hi\");\n  }, [values.cat]);\n  useEffectSkipFirst(() => {\n    if (values.cat === \"asset\") {\n      //entity list call api (asset\n      //setEntities -> multi select\n      apiProvider.getEna(values.entityType).then(res => {\n        // setEntities(res.data)\n        props.type === \"Multi\" ? dispatch(getEntities(res.data)) : dispatch(getEntityFrom(res.data));\n      });\n    } else {\n      apiProvider.getVendors(values.entityType).then(res => {\n        setVendors(res.data);\n        setModels([]);\n      });\n    }\n  }, [values.entityType]);\n  useEffectSkipFirst(() => {\n    console.log(entities);\n  }, [entities]);\n  useEffectSkipFirst(() => {\n    apiProvider.getModels(values.entityType, values.vendor).then(res => {\n      setModels(res.data.map(item => item.model));\n    });\n  }, [values.vendor]);\n  useEffectSkipFirst(() => {\n    if (values.cat === \"device\") {\n      //entity list call api (device)\n      apiProvider.getEnd(values.entityType, values.vendor, values.model).then(res => {\n        // setEntities(res.data)\n        props.type === \"Multi\" ? dispatch(getEntities(res.data)) : dispatch(getEntityFrom(res.data));\n      });\n    }\n  }, [values.model]);\n  useEffectSkipFirst(() => {\n    //DetailRel.js 에 add function 가져다써야함.\n    console.log(state);\n    apiProvider.insertLink(state).then(() => {\n      dispatch(revRe(true));\n      dispatch(selectedOp([]));\n    });\n  }, [state]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        readonly: true,\n        name: \"relation\",\n        label: \"relation\",\n        value: values.relation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"cat\",\n        label: \"Category\",\n        value: values.cat,\n        ...(props.editable || props.editable === undefined ? {\n          onChange: handleInputChange\n        } : {}),\n        options: [\"asset\", \"device\"] // error={errors.departmentId}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"entityType\",\n        label: \"Entity Type\",\n        value: values.entityType,\n        ...(props.editable || props.editable === undefined ? {\n          onChange: handleInputChange\n        } : {}),\n        options: entityTypes // error={errors.departmentId}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), values.cat === \"device\" && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        name: \"vendor\",\n        label: \"Vendor\",\n        value: values.vendor || '',\n        ...(props.editable || props.editable === undefined ? {\n          onChange: handleInputChange\n        } : {}),\n        options: vendors,\n        error: errors.vendor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"model\",\n        label: \"Model\",\n        value: values.model || '',\n        ...(props.editable || props.editable === undefined ? {\n          onChange: handleInputChange\n        } : {}),\n        options: models,\n        error: errors.model\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }, this), entities !== \"\" && (props.type === \"Multi\" ? /*#__PURE__*/_jsxDEV(MultiSelect, {\n      options: entities.map(item => item.name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(Select, {\n      options: entityFrom.map(item => item.name),\n      value: selectedFrom,\n      onChange: handleInputChange2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 13\n  }, this);\n}\n\n_s2(NodeSelect, \"iuwGSz1/Dc8E6/NAYdxHzAnuFeg=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useForm, useEffectSkipFirst, useEffectSkipFirst, useEffectSkipFirst, useEffectSkipFirst, useEffectSkipFirst, useEffectSkipFirst];\n});\n\n_c = NodeSelect;\nexport default _c2 = /*#__PURE__*/React.memo(NodeSelect);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NodeSelect\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/NodeSelect.js"],"names":["React","useState","useEffect","Grid","useForm","Form","Input","Select","makeStyles","useDispatch","useSelector","apiProvider","MultiSelect","getEntityFrom","revRe","selectedOp","selectedOpFrom","getEntities","useStyles","theme","button","display","marginTop","spacing","formControl","margin","minWidth","NodeSelect","props","entityTypes","setEntityTypes","vendors","setVendors","models","setModels","entities","state","SlidePop","entityFrom","selectedFrom","selectedDataF","setState","relation","fromNodeID","toNodeID","dispatch","validate","initialFValues","cat","model","vendor","entityType","createdAt","updatedAt","values","setValues","errors","setErrors","handleInputChange","resetForm","handleInputChange2","event","value","target","useEffectSkipFirst","fn","arr","isFirst","useRef","current","getTypes","then","res","data","console","log","getEna","type","getVendors","getModels","map","item","getEnd","insertLink","editable","undefined","onChange","name","memo"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Grid, } from '@material-ui/core';\nimport {useForm, Form} from \"./useForm\";\nimport Input from \"./controls/Input\";\nimport Select from \"./controls/Select\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {apiProvider} from \"../services/Provider\";\nimport MultiSelect from \"./controls/MultiSelect\";\nimport {getEntityFrom, revRe, selectedOp, selectedOpFrom} from \"../services/Redux/actions\";\nimport {getEntities} from \"../services/Redux/actions\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n}));\n\n//clicked data 있으면 from node 설정 안하게 만들어놔야함.\nfunction NodeSelect(props) {\n    // const data = useSelector(state => state.SlidePop.clickedData)\n    // const classes = useStyles();\n    // const mounted = React.useRef(false);\n    // // const [cat, setCat] = React.useState('');\n    const [entityTypes, setEntityTypes] = React.useState([]);\n    const [vendors, setVendors] = React.useState([]);\n    const [models, setModels] = React.useState([]);\n\n    // const [entities, setEntities] = React.useState(\"\");\n    const entities = useSelector(state=>state.SlidePop.entities)\n    const entityFrom = useSelector(state=>state.SlidePop.entityFrom)\n    // const selected = useSelector(state=>state.SlidePop.selectedData)\n    const selectedFrom = useSelector(state=>state.SlidePop.selectedDataF)\n\n    const [state, setState] = useState([{\n        relation:'',\n        fromNodeID:'',\n        toNodeID:''\n    }])\n    const dispatch = useDispatch();\n\n    const validate = {} //todo::validation만들기\n    const initialFValues = {\n        cat:'',\n        model: '',\n        vendor: '',\n        entityType: '',\n        relation: 'contain',\n        // from_node_id: data.id,\n        // to_node_id: '',\n        createdAt: '1',\n        updatedAt: '1'\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, false, validate, )\n\n    const handleInputChange2 = (event) => {\n        const value = event.target.value;\n        // dispatch(selectedOp(value))\n        dispatch(selectedOpFrom(value)) //그냥 문자열로 들어갈거같은뎅\n\n    }\n    //custom hook\n    function useEffectSkipFirst(fn, arr){\n        const isFirst = React.useRef(true);\n\n        useEffect(()=>{\n            if(isFirst.current){\n                isFirst.current = false;\n                return;\n            }\n            return fn();\n        }, arr);\n    }\n\n    useEffectSkipFirst(()=>{\n        apiProvider.getTypes(values.cat).then((res) =>\n            setEntityTypes(res.data))\n            console.log(\"hi\")\n    }, [values.cat])\n\n    useEffectSkipFirst(()=>{\n        if(values.cat === \"asset\"){\n            //entity list call api (asset\n            //setEntities -> multi select\n            apiProvider.getEna(values.entityType).then((res)=>\n            {\n                // setEntities(res.data)\n                props.type===\"Multi\" ? dispatch(getEntities(res.data)) : dispatch(getEntityFrom(res.data))\n            })\n        }\n        else {\n            apiProvider.getVendors(values.entityType).then((res) =>\n            {\n                setVendors(res.data);\n                setModels([]);\n            })\n        }\n    }, [values.entityType])\n\n    useEffectSkipFirst(()=>{\n        console.log(entities)\n    }, [entities])\n\n    useEffectSkipFirst(()=>{\n        apiProvider.getModels(values.entityType, values.vendor).then((res)=>\n        {\n            setModels(res.data.map((item)=> item.model))\n        })\n    }, [values.vendor])\n\n    useEffectSkipFirst(()=>{\n        if(values.cat === \"device\"){\n            //entity list call api (device)\n            apiProvider.getEnd(values.entityType, values.vendor, values.model).then((res)=>\n            {\n                // setEntities(res.data)\n                props.type===\"Multi\"? dispatch(getEntities(res.data)) : dispatch(getEntityFrom(res.data))\n            })\n        }\n\n    }, [values.model])\n\n    useEffectSkipFirst(()=>{\n        //DetailRel.js 에 add function 가져다써야함.\n        console.log(state)\n        apiProvider.insertLink(state).then(()=>{dispatch(revRe(true));dispatch(selectedOp([]))})\n    }, [state])\n\n    return(\n            <Grid container>\n                <Grid item xs={6}>\n\n                    <Input\n                        readonly={true}\n                        name=\"relation\"\n                        label=\"relation\"\n                        value={values.relation}\n                    />\n                    <Select\n                        name=\"cat\"\n                        label=\"Category\"\n                        value={values.cat}\n                        {...(props.editable || props.editable === undefined ? {onChange: handleInputChange} : {})}\n                        options={[\"asset\", \"device\"]}\n                        // error={errors.departmentId}\n                    />\n\n                    <Select\n                        name=\"entityType\"\n                        label=\"Entity Type\"\n                        value={values.entityType}\n                        {...(props.editable || props.editable === undefined ? {onChange: handleInputChange} : {})}\n                        options={entityTypes}\n                        // error={errors.departmentId}\n                    />\n\n                </Grid>\n                {values.cat === \"device\" && (\n                    <Grid item xs={6}>\n\n                        <Select\n                            name=\"vendor\"\n                            label=\"Vendor\"\n                            value={values.vendor || ''}\n                            {...(props.editable || props.editable === undefined ? {onChange: handleInputChange} : {})}\n                            options={vendors}\n                            error={errors.vendor}\n                        />\n                        <Select\n                            name=\"model\"\n                            label=\"Model\"\n                            value={values.model || ''}\n                            {...(props.editable || props.editable === undefined ? {onChange: handleInputChange} : {})}\n                            options={models}\n                            error={errors.model}\n                        />\n                    </Grid>)\n                }\n                {entities !== \"\" && (\n                    props.type===\"Multi\" ? (\n                        <MultiSelect\n                            options={\n                                entities.map((item)=>(\n                                    item.name\n                                ))\n                            }\n                        >\n                        </MultiSelect>\n                    ) : (\n                        <Select\n                            options={\n                                entityFrom.map((item)=>(\n                                    item.name\n                                ))\n                            }\n                            value={selectedFrom}\n                            onChange={handleInputChange2}\n                        >\n                        </Select>\n                    )\n                )}\n\n            </Grid>\n    )\n}\n\nexport default React.memo(NodeSelect)"]},"metadata":{},"sourceType":"module"}