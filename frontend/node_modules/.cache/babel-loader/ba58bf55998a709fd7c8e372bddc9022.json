{"ast":null,"code":"var _jsxFileName = \"/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTable.js\";\nimport React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\n\nimport { Field } from \"redux-form\"; // import Table from \"react-table\";\n\nimport Table from \"react-table\";\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport { avatarColumnProps } from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport { useSelector } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport 'react-table/react-table.css';\nimport { addedField, currEd, deleteTmp, getAllR, hisFlag, keyFieldSelect, openSelectKeyFieldPop } from \"../../services/Redux/actions\";\nimport { bindActionCreators } from 'redux';\nimport { addTmp, revRe, openPop } from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport { apiProvider } from \"../../services/Provider\";\nimport \"./style.scss\";\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\"; //TODO:: Add했다가 캔슬하면 없어지게해야함.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GridTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: null,\n      selected: {},\n      selectAll: 0,\n      adding: false,\n      columns: [],\n      selectEdit: false\n    };\n    this.selectList = {\n      typeList: [\"String\", \"Numeric\", \"IP\"],\n      groupList: [\"Required\", \"Additional\"]\n    };\n\n    this.getSelect = (type, curr) => {\n      const v = this.selectList[type].filter(i => i !== curr);\n      return v;\n    };\n\n    this.resetColumn = () => {\n      this.setState(state => {\n        return { ...state,\n          columns: [{\n            columns: [{\n              id: \"checkbox\",\n              accessor: \"\",\n              Cell: ({\n                original\n              }) => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selected[original.id] === true,\n                  onChange: () => this.toggleRow(original.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 41\n                }, this);\n              },\n              Header: x => {\n                return /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkbox\",\n                  checked: this.state.selectAll === 1,\n                  ref: input => {\n                    if (input) {\n                      input.indeterminate = this.state.selectAll === 2;\n                    }\n                  },\n                  onChange: () => this.toggleSelectAll()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 41\n                }, this);\n              },\n              sortable: false,\n              width: 45\n            }]\n          }].concat(this.props.columns.slice().map(item => {\n            return { ...item,\n              ...this.editableColumnProps\n            };\n          })).concat({\n            Header: \"\",\n            maxWidth: 90,\n            filterable: false,\n            getProps: this.getActionProps,\n            Cell: ActionsCell\n          })\n        };\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      // const select = (prevProps.data!== this.props.data)\n      const cond = prevProps.refre !== this.props.refre;\n\n      if (cond) {\n        // this.props.currEd(\"0\")\n        this.resetColumn();\n        this.props.handleData();\n      }\n    };\n\n    this.selectableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'select' : 'p';\n\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 26\n      }, this) || /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), this.getSelect(\"typeList\", value).map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 72\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.editableComponent = ({\n      input,\n      editing,\n      value,\n      ...rest\n    }) => {\n      const result = Object.keys(rest).reduce((prev, current) => ({ ...prev,\n        [current.toLowerCase()]: rest[current]\n      }), {});\n      const Component = editing ? 'input' : 'p';\n      const children = !editing && /*#__PURE__*/_jsxDEV(HighlightCell, {\n        value: value,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 26\n      }, this) || undefined;\n      return /*#__PURE__*/_jsxDEV(Component, { ...input,\n        ...result,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.isSelectField = col => [\"type\", \"group\"].indexOf(col) !== -1;\n\n    this.editableColumnProps = { ...GridFilters,\n      Cell: props => {\n        const editing = this.state.editing === props.original;\n        const fieldProps = {\n          component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n          editing,\n          props\n        };\n        return /*#__PURE__*/_jsxDEV(Field, {\n          name: props.column.id,\n          ...fieldProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.handleCellClick = data => {// this.props.handleRow(data)\n    };\n\n    this.getActionProps = (gridState, rowProps) => rowProps && {\n      mode: this.state.editing === rowProps.original ? this.state.adding ? \"add\" : \"edit\" : \"view\",\n      actions: {\n        onEdit: () => {\n          !this.state.adding && this.setState({\n            editing: rowProps.original,\n            adding: false\n          });\n        },\n        onCancel: () => {\n          this.setState({\n            editing: null,\n            adding: false\n          });\n          this.state.adding && this.props.delTmp(this.props.data.length);\n        }\n      }\n    } || {};\n\n    this.handleSubmit = values => {\n      console.log(values);\n      this.setState(state => {\n        this.props.addTmp(this.props.data.map(item => {\n          return item.id === values.id ? values : item;\n        }));\n        return state.adding ? { ...state,\n          adding: false\n        } : { ...state\n        };\n      });\n    };\n\n    this.handleSave = () => {\n      apiProvider.delAll('field').then(this.props.data.forEach(item => {\n        this.props.addf(item);\n      }));\n      const history = {\n        id: \"1\",\n        desc: \"temp\",\n        user: \"admin\",\n        released: \"false\",\n        value: {\n          field: this.props.data\n        }\n      };\n      console.log(this.props.data);\n      apiProvider.insert('history', history).then(() => {\n        this.props.hisFlag(true);\n      });\n    };\n\n    this.handleDelete = () => {\n      console.log(Object.keys(this.state.selected));\n      Object.keys(this.state.selected).forEach(i => this.props.delTmp(i));\n      this.setState(state => {\n        return { ...state,\n          selected: {}\n        };\n      });\n    };\n\n    this.handleAdd = () => {\n      const addTemp = this.state.columns.slice();\n      addTemp.splice(-1, 1);\n      addTemp.splice(0, 1);\n      const tp = {};\n      addTemp.forEach(({\n        accessor\n      }) => {\n        tp[accessor] = \"\";\n      });\n      tp.fieldId = this.props.data.length + 1; //식별용으로 필요함\n\n      this.setState(state => {\n        return { ...state,\n          editing: tp,\n          adding: true\n        };\n      });\n      console.log(tp);\n      this.props.addTmp([tp, ...this.props.data]);\n    };\n\n    this.onRowClick = (state, rowInfo, column, instance) => {\n      return {\n        onClick: e => {\n          this.props.handleRow(rowInfo.original);\n        }\n      };\n    };\n  }\n\n  componentDidMount() {\n    this.resetColumn();\n    this.props.handleData();\n  }\n\n  toggleRow(id) {\n    //redux로 옮겨야함.\n    const newSelected = Object.assign({}, this.state.selected);\n    newSelected[id] = !this.state.selected[id];\n    this.setState({\n      selected: newSelected,\n      selectAll: 2\n    });\n    console.log(this.state.selected); //왜 바로 안나오지\n  }\n\n  toggleSelectAll() {\n    let newSelected = {};\n    console.log(this.state.selected);\n\n    if (this.state.selectAll === 0) {\n      this.props.data.forEach(x => {\n        newSelected[x.id] = true;\n      });\n    }\n\n    this.setState({\n      selected: newSelected,\n      selectAll: this.state.selectAll === 0 ? 1 : 0\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleAdd,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleDelete,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.revRe(true),\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seperate-bar-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => this.props.openPop(true),\n          children: \"\\uBC30\\uD3EC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Fixed\",\n          children: /*#__PURE__*/_jsxDEV(FormProvider, {\n            form: \"inline\",\n            onSubmit: this.handleSubmit,\n            onSubmitSuccess: () => this.setState({\n              editing: null\n            }),\n            initialValues: this.state.editing,\n            enableReinitialize: true,\n            children: formProps => {\n              return /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: formProps.handleSubmit,\n                children: /*#__PURE__*/_jsxDEV(Table // getTdProps={(state, rowInfo, column) => ({\n                //     onClick: () => {\n                //       (column.id ==\"keyField\" && this.state.editing) && this.handleKeyFieldSelect(rowInfo.original)\n                //     }\n                // })}\n                , {\n                  columns: this.state.columns,\n                  data: this.props.data // manual\n                  // PaginationComponent={Pagination}\n                  ,\n                  pageSizeOptions: [2, 10, 500, 1000],\n                  defaultPageSize: 2,\n                  sorted: [{\n                    id: 'id'\n                  }] //fieldID로 바꾸고\n                  // defaultPageSize={10}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  selectKPop: state.fetchAPI.openKeyField,\n  kfOb: state.fetchAPI.keyField,\n  data: state.fetchAPI.data,\n  refre: state.fetchAPI.refre,\n  add: state.fetchAPI.ad,\n  hflag: state.fetchAPI.hflag,\n  newField: state.fetchAPI.addedField\n}), dispatch => {\n  return bindActionCreators({\n    setKfOb: keyFieldSelect,\n    addTmp: addTmp,\n    revRe: revRe,\n    openPop: openPop,\n    delTmp: deleteTmp,\n    currEd: currEd,\n    hisFlag: hisFlag,\n    addedField: addedField\n  }, dispatch);\n})(GridTable);","map":{"version":3,"sources":["/home/leesohyang/WebstormProjects/fronted_react_final/src/components/table/gridTable.js"],"names":["React","set","Field","Table","BS","initialData","FormProvider","avatarColumnProps","ActionsCell","HighlightCell","GridFilters","useSelector","connect","fetchAPI","addedField","currEd","deleteTmp","getAllR","hisFlag","keyFieldSelect","openSelectKeyFieldPop","bindActionCreators","addTmp","revRe","openPop","Pagination","apiProvider","SelectKeyFieldPopup","GridTable","Component","state","editing","selected","selectAll","adding","columns","selectEdit","selectList","typeList","groupList","getSelect","type","curr","v","filter","i","resetColumn","setState","id","accessor","Cell","original","toggleRow","Header","x","input","indeterminate","toggleSelectAll","sortable","width","concat","props","slice","map","item","editableColumnProps","maxWidth","filterable","getProps","getActionProps","componentDidUpdate","prevProps","cond","refre","handleData","selectableComponent","value","rest","result","Object","keys","reduce","prev","current","toLowerCase","children","index","editableComponent","undefined","isSelectField","col","indexOf","fieldProps","component","column","handleCellClick","data","gridState","rowProps","mode","actions","onEdit","onCancel","delTmp","length","handleSubmit","values","console","log","handleSave","delAll","then","forEach","addf","history","desc","user","released","field","insert","handleDelete","handleAdd","addTemp","splice","tp","fieldId","onRowClick","rowInfo","instance","onClick","e","handleRow","componentDidMount","newSelected","assign","render","formProps","selectKPop","openKeyField","kfOb","keyField","add","ad","hflag","newField","dispatch","setKfOb"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport set from \"lodash/fp/set\"; //얘는 지우고\nimport {Field} from \"redux-form\";\n// import Table from \"react-table\";\nimport Table from \"react-table\"\nimport * as BS from \"react-bootstrap\";\nimport initialData from \"./dataFactory\";\nimport FormProvider from \"./FormProvider\";\nimport {avatarColumnProps} from \"./AvatarCell\";\nimport ActionsCell from \"./ActionsCell\";\nimport HighlightCell from \"./HighlightCell\";\nimport GridFilters from \"./GridFilters\";\nimport {useSelector} from \"react-redux\";\nimport {connect} from \"react-redux\"\nimport fetchAPI from \"../../services/Redux/reducers/fetchAPI\";\nimport 'react-table/react-table.css';\nimport {\n    addedField,\n    currEd,\n    deleteTmp,\n    getAllR,\n    hisFlag,\n    keyFieldSelect,\n    openSelectKeyFieldPop\n} from \"../../services/Redux/actions\";\nimport {bindActionCreators} from 'redux';\nimport {addTmp, revRe, openPop} from \"../../services/Redux/actions\";\nimport Pagination from \"./Pagination\";\nimport {apiProvider} from \"../../services/Provider\";\nimport \"./style.scss\"\nimport SelectKeyFieldPopup from \"../popup/SelectKeyFieldPopup\";\n\n\n//TODO:: Add했다가 캔슬하면 없어지게해야함.\n\nclass GridTable extends React.Component {\n    state = {editing: null, selected: {}, selectAll: 0, adding: false, columns: [], selectEdit: false};\n\n    selectList = {\n        typeList: [\"String\", \"Numeric\", \"IP\"],\n        groupList: [\"Required\", \"Additional\"]\n    }\n\n    getSelect = (type, curr) => {\n        const v = this.selectList[type].filter(i => i !== curr)\n        return v\n    }\n\n    resetColumn = () => {\n        this.setState((state) => {\n            return {\n                ...state, columns:\n                    [{\n                        columns: [\n                            {\n                                id: \"checkbox\",\n                                accessor: \"\",\n                                Cell: ({original}) => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selected[original.id] === true}\n                                            onChange={() => this.toggleRow(original.id)}\n                                        />\n                                    );\n                                },\n                                Header: x => {\n                                    return (\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"checkbox\"\n                                            checked={this.state.selectAll === 1}\n                                            ref={input => {\n                                                if (input) {\n                                                    input.indeterminate = this.state.selectAll === 2;\n                                                }\n                                            }}\n                                            onChange={() => this.toggleSelectAll()}\n                                        />\n                                    );\n                                },\n                                sortable: false,\n                                width: 45\n                            },\n                        ]\n                    }].concat(\n                        this.props.columns.slice().map((item) => {\n                            return {...item, ...this.editableColumnProps}\n                        })\n                    )\n                        .concat(\n                            {\n                                Header: \"\",\n                                maxWidth: 90,\n                                filterable: false,\n                                getProps: this.getActionProps,\n                                Cell: ActionsCell\n                            }\n                        )\n            }\n        })\n    }\n\n    componentDidMount() {\n\n        this.resetColumn()\n        this.props.handleData()\n    }\n\n    componentDidUpdate = (prevProps) => {\n        // const select = (prevProps.data!== this.props.data)\n        const cond = (prevProps.refre !== this.props.refre)\n        if (cond) {\n            // this.props.currEd(\"0\")\n            this.resetColumn()\n            this.props.handleData()\n        }\n    }\n\n\n\n    selectableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'select' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || <React.Fragment>\n                <option>{value}</option>\n                {this.getSelect(\"typeList\", value).map(\n                    (item, index) => (\n                        <option key={index} value={item}>{item}</option>\n                    )\n                )}\n            </React.Fragment>;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n\n    editableComponent = ({input, editing, value, ...rest}) => {\n\n        const result = Object.keys(rest).reduce((prev, current) =>\n            ({...prev, [current.toLowerCase()]: rest[current]}), {})\n        const Component = editing ? 'input' : 'p';\n        const children =\n            (!editing && <HighlightCell value={value} {...rest} />) || undefined;\n        return <Component {...input} {...result} children={children}/>;\n    };\n\n    isSelectField = (col) => [\"type\", \"group\"].indexOf(col) !== -1\n\n    editableColumnProps = {\n        ...GridFilters,\n        Cell: (props) => {\n            const editing = this.state.editing === props.original;\n            const fieldProps = {\n                component: this.isSelectField(props.column.id) ? this.selectableComponent : this.editableComponent,\n                editing,\n                props\n            };\n            return <Field name={props.column.id} {...fieldProps} />;\n\n        }\n    };\n\n    handleCellClick = (data) => {\n        // this.props.handleRow(data)\n    }\n\n    getActionProps = (gridState, rowProps) =>\n        (rowProps && {\n            mode: this.state.editing === rowProps.original ? (this.state.adding ? \"add\" : \"edit\") : \"view\",\n\n            actions: {\n                onEdit: () => {\n                    !this.state.adding && this.setState({editing: rowProps.original, adding: false})\n                },\n                onCancel: () => {\n                    this.setState({editing: null, adding: false});\n                    this.state.adding && this.props.delTmp(this.props.data.length)\n                }\n            }\n        }) ||\n        {};\n\n    toggleRow(id) { //redux로 옮겨야함.\n        const newSelected = Object.assign({}, this.state.selected);\n        newSelected[id] = !this.state.selected[id];\n        this.setState({\n            selected: newSelected,\n            selectAll: 2\n        });\n        console.log(this.state.selected) //왜 바로 안나오지\n    }\n\n    toggleSelectAll() {\n        let newSelected = {};\n        console.log(this.state.selected)\n        if (this.state.selectAll === 0) {\n            this.props.data.forEach(x => {\n                newSelected[x.id] = true;\n            });\n        }\n\n        this.setState({\n            selected: newSelected,\n            selectAll: this.state.selectAll === 0 ? 1 : 0\n        });\n    }\n\n    handleSubmit = (values) => {\n        console.log(values)\n        this.setState((state) => {\n            this.props.addTmp(this.props.data.map((item) => {\n                return item.id === values.id ? values : item\n            }))\n\n            return state.adding ? {...state, adding: false} : {...state}\n\n        });\n    };\n\n    handleSave = () => {\n        apiProvider.delAll('field').then(\n            this.props.data.forEach((item) => {\n                this.props.addf(item)\n            })\n        )\n\n        const history = {\n            id: \"1\",\n            desc: \"temp\",\n            user: \"admin\",\n            released: \"false\",\n            value: {field: this.props.data}\n        }\n        console.log(this.props.data)\n        apiProvider.insert('history', history).then(() => {\n            this.props.hisFlag(true)\n        })\n    }\n\n    handleDelete = () => {\n        console.log(Object.keys(this.state.selected))\n        Object.keys(this.state.selected).forEach((i) =>\n                this.props.delTmp(i)\n        )\n        this.setState((state) => {\n            return {...state, selected: {}}\n        })\n\n    }\n\n    //TODO::add 여러번 하게하면 안됨. + 자동으로 index 생성되게 해야되는데 + livedetectrule add row가 이상한곳에 생김.\n    handleAdd = () => {\n        const addTemp = this.state.columns.slice()\n        addTemp.splice(-1, 1)\n        addTemp.splice(0, 1)\n        const tp = {};\n        addTemp.forEach(({accessor}) => {\n            tp[accessor] = \"\"\n        })\n        tp.fieldId = this.props.data.length + 1 //식별용으로 필요함\n        this.setState((state) => {\n            return {...state, editing: tp, adding: true}\n        })\n        console.log(tp)\n        this.props.addTmp([tp, ...this.props.data])\n    }\n\n    onRowClick = (state, rowInfo, column, instance) => {\n        return {\n            onClick: e => {\n                this.props.handleRow(rowInfo.original)\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"btns\">\n                    <button className=\"btn\" onClick={this.handleAdd}>\n                        Add\n                    </button>\n                    <button className=\"btn\" onClick={this.handleDelete}>\n                        Delete\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.revRe(true)}>\n                        Refresh\n                    </button>\n\n                    <div className=\"seperate-bar-100\"/>\n\n                    <button className=\"btn\" onClick={this.handleSave}>\n                        Save\n                    </button>\n                    <button className=\"btn\" onClick={() => this.props.openPop(true)}>\n                        배포\n                    </button>\n                </div>\n                <div className=\"table-wrapper\">\n                    {/*<div className=\"table-total-count\" style={{ fontSize: '12px' }}>*/}\n                    {/*  Total:*/}\n                    {/*</div>*/}\n                    <div className=\"Fixed\">\n\n                        <FormProvider\n                            form=\"inline\"\n                            onSubmit={this.handleSubmit}\n                            onSubmitSuccess={() => this.setState({editing: null})}\n                            initialValues={this.state.editing}\n                            enableReinitialize\n                        >\n                            {(formProps) => {\n                                return (\n                                    <form onSubmit={formProps.handleSubmit}>\n                                        <Table\n                                            // getTdProps={(state, rowInfo, column) => ({\n                                            //     onClick: () => {\n                                            //       (column.id ==\"keyField\" && this.state.editing) && this.handleKeyFieldSelect(rowInfo.original)\n                                            //     }\n                                            // })}\n                                            columns={\n                                                this.state.columns\n                                            }\n                                            data={this.props.data}\n                                            // manual\n                                            // PaginationComponent={Pagination}\n                                            pageSizeOptions={[2, 10, 500, 1000]}\n                                            defaultPageSize={2}\n                                            sorted={[{id: 'id'}]} //fieldID로 바꾸고\n\n                                            // defaultPageSize={10}\n                                        />\n                                    </form>\n                                );\n                            }}\n                        </FormProvider>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        selectKPop: state.fetchAPI.openKeyField,\n        kfOb: state.fetchAPI.keyField,\n        data: state.fetchAPI.data,\n        refre: state.fetchAPI.refre,\n        add: state.fetchAPI.ad,\n        hflag: state.fetchAPI.hflag,\n        newField: state.fetchAPI.addedField\n    }),\n    dispatch => {\n        return bindActionCreators(\n            {\n                setKfOb: keyFieldSelect,\n                addTmp: addTmp,\n                revRe: revRe,\n                openPop: openPop,\n                delTmp: deleteTmp,\n                currEd: currEd,\n                hisFlag: hisFlag,\n                addedField: addedField\n            },\n            dispatch\n        )\n    }\n)(GridTable)"]},"metadata":{},"sourceType":"module"}